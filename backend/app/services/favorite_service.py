"""
Servi√ßos de neg√≥cio para Pok√©mons favoritos.
"""
from sqlalchemy.orm import Session
from sqlalchemy import func
from typing import List
from app.models.models import FavoritePokemon, PokemonRanking
from app.schemas.schemas import FavoritePokemonCreate
from datetime import datetime


class FavoriteService:
    """Servi√ßo para opera√ß√µes com favoritos."""

    @staticmethod
    def add_favorite(db: Session,
                     favorite: FavoritePokemonCreate) -> FavoritePokemon:
        """Adiciona Pok√©mon aos favoritos."""
        # Verifica se j√° n√£o est√° nos favoritos
        existing = db.query(FavoritePokemon).filter(
            FavoritePokemon.user_id == favorite.user_id,
            FavoritePokemon.pokemon_id == favorite.pokemon_id
        ).first()

        if existing:
            return existing

        # Cria novo favorito
        db_favorite = FavoritePokemon(
            user_id=favorite.user_id,
            pokemon_id=favorite.pokemon_id,
            pokemon_name=favorite.pokemon_name
        )
        db.add(db_favorite)

        # Atualiza ranking baseado em capturas (n√£o favoritos)
        FavoriteService._update_ranking_from_captures(
            db, favorite.pokemon_id, favorite.pokemon_name)

        db.commit()
        db.refresh(db_favorite)
        return db_favorite

    @staticmethod
    def remove_favorite(db: Session, user_id: int, pokemon_id: int) -> bool:
        """Remove Pok√©mon dos favoritos."""
        favorite = db.query(FavoritePokemon).filter(
            FavoritePokemon.user_id == user_id,
            FavoritePokemon.pokemon_id == pokemon_id
        ).first()

        if not favorite:
            return False

        pokemon_name = favorite.pokemon_name
        db.delete(favorite)

        # Atualiza ranking baseado em capturas (n√£o favoritos)
        FavoriteService._update_ranking_from_captures(
            db, pokemon_id, pokemon_name, increment=False)

        db.commit()
        return True

    @staticmethod
    def get_user_favorites(db: Session, user_id: int) -> List[FavoritePokemon]:
        """Busca favoritos do usu√°rio."""
        return db.query(FavoritePokemon).filter(
            FavoritePokemon.user_id == user_id
        ).all()

    @staticmethod
    def check_multiple_favorites(
        db: Session,
        user_id: int,
        pokemon_ids: List[int]
    ) -> dict:
        """
        Verifica quais Pok√©mons de uma lista est√£o nos favoritos do usu√°rio.

        Args:
            db: Sess√£o do banco de dados
            user_id: ID do usu√°rio
            pokemon_ids: Lista de IDs de Pok√©mon para verificar

        Returns:
            Dicion√°rio onde as chaves s√£o os IDs dos Pok√©mons e os valores s√£o
            booleanos indicando se est√£o nos favoritos
        """
        if not pokemon_ids:
            return {}

        # Converte para set para remover duplicatas
        pokemon_ids = list(set(pokemon_ids))

        # Busca todos os favoritos do usu√°rio que est√£o na lista de IDs fornecida
        query = db.query(FavoritePokemon.pokemon_id)
        query = query.filter(
            FavoritePokemon.user_id == user_id,
            FavoritePokemon.pokemon_id.in_(pokemon_ids)
        )
        favorites = query.all()

        # Cria um conjunto com os IDs dos favoritos para busca mais r√°pida
        favorite_ids = {fav.pokemon_id for fav in favorites}

        # Retorna um dicion√°rio com o status de cada Pok√©mon
        return {
            str(pokemon_id): pokemon_id in favorite_ids
            for pokemon_id in pokemon_ids
        }

    @staticmethod
    def is_favorite(db: Session, user_id: int, pokemon_id: int) -> bool:
        """Verifica se Pok√©mon √© favorito do usu√°rio."""
        favorite = db.query(FavoritePokemon).filter(
            FavoritePokemon.user_id == user_id,
            FavoritePokemon.pokemon_id == pokemon_id
        ).first()
        return favorite is not None

    @staticmethod
    def get_ranking(db: Session, limit: int = 10) -> list[dict]:
        """Busca ranking dos Pok√©mons mais capturados (n√£o favoritados)."""
        # Primeiro, vamos buscar do PokemonRanking se existir
        ranking_records = db.query(PokemonRanking).order_by(
            PokemonRanking.favorite_count.desc()
        ).limit(limit).all()

        if ranking_records:
            # Se h√° dados na tabela PokemonRanking, use-os
            rankings = []
            for record in ranking_records:
                ranking = {
                    'id': record.id,
                    'pokemon_id': record.pokemon_id,
                    'pokemon_name': record.pokemon_name,
                    'favorite_count': record.favorite_count,
                    'last_updated': record.last_updated
                }
                rankings.append(ranking)
            return rankings

        # Se n√£o h√° dados no PokemonRanking, gera dinamicamente a partir dos favoritos
        capture_counts = db.query(
            FavoritePokemon.pokemon_id,
            FavoritePokemon.pokemon_name,
            func.count(FavoritePokemon.id).label('capture_count')
        ).group_by(
            FavoritePokemon.pokemon_id,
            FavoritePokemon.pokemon_name
        ).order_by(
            func.count(FavoritePokemon.id).desc()
        ).limit(limit).all()

        rankings = []
        now = datetime.now()
        for i, (pokemon_id, pokemon_name, capture_count) in enumerate(capture_counts):
            ranking = {
                'id': i + 1,  # ID sequencial
                'pokemon_id': pokemon_id,
                'pokemon_name': pokemon_name,
                'favorite_count': capture_count,
                'last_updated': now
            }
            rankings.append(ranking)

        return rankings

    @staticmethod
    def _update_ranking_from_captures(db: Session, pokemon_id: int, pokemon_name: str, increment: bool = True):
        """Atualiza ranking do Pok√©mon baseado em capturas."""
        # Este m√©todo agora √© usado apenas para manter compatibilidade
        # O ranking real √© calculado dinamicamente em get_ranking()
        pass

    @staticmethod
    def get_stats(db: Session) -> dict:
        """Busca estat√≠sticas gerais baseadas em capturas."""
        total_captures = db.query(FavoritePokemon).count()

        # Busca o Pok√©mon mais capturado
        most_captured = db.query(
            FavoritePokemon.pokemon_id,
            FavoritePokemon.pokemon_name,
            func.count(FavoritePokemon.id).label('capture_count')
        ).group_by(
            FavoritePokemon.pokemon_id,
            FavoritePokemon.pokemon_name
        ).order_by(
            func.count(FavoritePokemon.id).desc()
        ).first()

        most_popular = None
        if most_captured:
            most_popular = PokemonRanking(
                pokemon_id=most_captured.pokemon_id,
                pokemon_name=most_captured.pokemon_name,
                favorite_count=most_captured.capture_count
            )

        return {
            "total_favorites": total_captures,  # Mant√©m nome para compatibilidade
            "most_popular_pokemon": most_popular
        }

    @staticmethod
    def get_all_favorites(db: Session) -> List[FavoritePokemon]:
        """Busca todos os favoritos do sistema."""
        return db.query(FavoritePokemon).all()

    @staticmethod
    def clear_all_favorites(db: Session, user_id: int) -> int:
        """üö® EMERG√äNCIA: Remove TODOS os favoritos de um usu√°rio espec√≠fico"""
        import logging
        logger = logging.getLogger(__name__)

        logger.warning(f"üö® LIMPEZA EMERGENCIAL: Removendo TODOS os favoritos do usu√°rio ID {user_id}")

        # Conta quantos favoritos ser√£o removidos
        count_query = db.query(FavoritePokemon).filter(FavoritePokemon.user_id == user_id)
        deleted_count = count_query.count()

        # Remove todos os favoritos do usu√°rio
        count_query.delete()
        db.commit()

        logger.info(f"‚úÖ Limpeza conclu√≠da: {deleted_count} favoritos removidos para o usu√°rio ID {user_id}")

        return deleted_count
