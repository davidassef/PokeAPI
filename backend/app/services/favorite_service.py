"""
Servi√ßos de neg√≥cio para gerenciamento de Pok√©mons favoritos.

Este m√≥dulo cont√©m a l√≥gica de neg√≥cio para opera√ß√µes relacionadas aos
Pok√©mons favoritos dos usu√°rios, incluindo adi√ß√£o, remo√ß√£o, consultas
e atualiza√ß√£o autom√°tica do ranking global.
"""
from sqlalchemy.orm import Session
from sqlalchemy import func
from typing import List
from app.models.models import FavoritePokemon, PokemonRanking
from app.schemas.schemas import FavoritePokemonCreate
from datetime import datetime


class FavoriteService:
    """
    Servi√ßo para opera√ß√µes com Pok√©mons favoritos.

    Centraliza toda a l√≥gica de neg√≥cio relacionada ao sistema de favoritos,
    incluindo valida√ß√µes, atualiza√ß√µes de ranking e opera√ß√µes CRUD.
    """

    @staticmethod
    def add_favorite(db: Session, favorite: FavoritePokemonCreate) -> FavoritePokemon:
        """
        Adiciona um Pok√©mon √† lista de favoritos do usu√°rio.

        Verifica se o Pok√©mon j√° est√° nos favoritos antes de adicionar
        e atualiza automaticamente o ranking global.

        Args:
            db: Sess√£o do banco de dados
            favorite: Dados do favorito a ser criado

        Returns:
            FavoritePokemon: O registro de favorito (novo ou existente)

        Note:
            Se o Pok√©mon j√° estiver nos favoritos, retorna o registro existente
            sem criar duplicata.
        """
        # Verifica se j√° existe nos favoritos para evitar duplicatas
        existing = db.query(FavoritePokemon).filter(
            FavoritePokemon.user_id == favorite.user_id,
            FavoritePokemon.pokemon_id == favorite.pokemon_id
        ).first()

        if existing:
            return existing

        # Cria novo registro de favorito
        db_favorite = FavoritePokemon(
            user_id=favorite.user_id,
            pokemon_id=favorite.pokemon_id,
            pokemon_name=favorite.pokemon_name
        )
        db.add(db_favorite)

        # Atualiza ranking global baseado na nova captura
        FavoriteService._update_ranking_from_captures(
            db, favorite.pokemon_id, favorite.pokemon_name)

        db.commit()
        db.refresh(db_favorite)
        return db_favorite

    @staticmethod
    def remove_favorite(db: Session, user_id: int, pokemon_id: int) -> bool:
        """
        Remove um Pok√©mon da lista de favoritos do usu√°rio.

        Localiza e remove o registro de favorito, atualizando automaticamente
        o ranking global e registrando a opera√ß√£o para auditoria.

        Args:
            db: Sess√£o do banco de dados
            user_id: ID do usu√°rio propriet√°rio do favorito
            pokemon_id: ID do Pok√©mon a ser removido dos favoritos

        Returns:
            bool: True se removido com sucesso, False se n√£o encontrado

        Note:
            A opera√ß√£o √© registrada em log para fins de auditoria.
        """
        import logging
        logger = logging.getLogger(__name__)

        # Busca o registro de favorito existente
        favorite = db.query(FavoritePokemon).filter(
            FavoritePokemon.user_id == user_id,
            FavoritePokemon.pokemon_id == pokemon_id
        ).first()

        if not favorite:
            logger.info(f"üîç Tentativa de remover favorito inexistente: User {user_id}, Pokemon {pokemon_id}")
            return False

        pokemon_name = favorite.pokemon_name

        # Registra a opera√ß√£o para auditoria
        logger.warning(f"üóëÔ∏è REMO√á√ÉO DE FAVORITO: User {user_id} removeu {pokemon_name} (ID: {pokemon_id})")

        # Remove o registro do banco
        db.delete(favorite)

        # Atualiza ranking global decrementando a contagem
        FavoriteService._update_ranking_from_captures(
            db, pokemon_id, pokemon_name, increment=False)

        db.commit()

        logger.info(f"‚úÖ Favorito removido com sucesso: {pokemon_name}")
        return True

    @staticmethod
    def get_user_favorites(db: Session, user_id: int) -> List[FavoritePokemon]:
        """
        Busca todos os Pok√©mons favoritos de um usu√°rio.

        Args:
            db: Sess√£o do banco de dados
            user_id: ID do usu√°rio

        Returns:
            List[FavoritePokemon]: Lista de favoritos do usu√°rio
        """
        return db.query(FavoritePokemon).filter(
            FavoritePokemon.user_id == user_id
        ).all()

    @staticmethod
    def check_multiple_favorites(
        db: Session,
        user_id: int,
        pokemon_ids: List[int]
    ) -> dict:
        """
        Verifica quais Pok√©mons de uma lista est√£o nos favoritos do usu√°rio.

        Args:
            db: Sess√£o do banco de dados
            user_id: ID do usu√°rio
            pokemon_ids: Lista de IDs de Pok√©mon para verificar

        Returns:
            Dicion√°rio onde as chaves s√£o os IDs dos Pok√©mons e os valores s√£o
            booleanos indicando se est√£o nos favoritos
        """
        if not pokemon_ids:
            return {}

        # Converte para set para remover duplicatas
        pokemon_ids = list(set(pokemon_ids))

        # Busca todos os favoritos do usu√°rio que est√£o na lista de IDs fornecida
        query = db.query(FavoritePokemon.pokemon_id)
        query = query.filter(
            FavoritePokemon.user_id == user_id,
            FavoritePokemon.pokemon_id.in_(pokemon_ids)
        )
        favorites = query.all()

        # Cria um conjunto com os IDs dos favoritos para busca mais r√°pida
        favorite_ids = {fav.pokemon_id for fav in favorites}

        # Retorna um dicion√°rio com o status de cada Pok√©mon
        return {
            str(pokemon_id): pokemon_id in favorite_ids
            for pokemon_id in pokemon_ids
        }

    @staticmethod
    def is_favorite(db: Session, user_id: int, pokemon_id: int) -> bool:
        """
        Verifica se um Pok√©mon espec√≠fico √© favorito do usu√°rio.

        Args:
            db: Sess√£o do banco de dados
            user_id: ID do usu√°rio
            pokemon_id: ID do Pok√©mon a ser verificado

        Returns:
            bool: True se o Pok√©mon √© favorito, False caso contr√°rio
        """
        favorite = db.query(FavoritePokemon).filter(
            FavoritePokemon.user_id == user_id,
            FavoritePokemon.pokemon_id == pokemon_id
        ).first()
        return favorite is not None

    @staticmethod
    def get_ranking(db: Session, limit: int = 10) -> list[dict]:
        """
        Busca o ranking dos Pok√©mons mais favoritados.

        Primeiro tenta buscar dados da tabela de ranking otimizada.
        Se n√£o houver dados, gera dinamicamente a partir dos favoritos.

        Args:
            db: Sess√£o do banco de dados
            limit: N√∫mero m√°ximo de itens no ranking (padr√£o: 10)

        Returns:
            list[dict]: Lista de dicion√°rios com dados do ranking

        Note:
            O ranking √© baseado no n√∫mero de vezes que cada Pok√©mon
            foi favoritado por diferentes usu√°rios.
        """
        # Tenta buscar dados da tabela de ranking otimizada
        ranking_records = db.query(PokemonRanking).order_by(
            PokemonRanking.favorite_count.desc()
        ).limit(limit).all()

        if ranking_records:
            # Usa dados da tabela otimizada se dispon√≠vel
            rankings = []
            for record in ranking_records:
                ranking = {
                    'id': record.id,
                    'pokemon_id': record.pokemon_id,
                    'pokemon_name': record.pokemon_name,
                    'favorite_count': record.favorite_count,
                    'last_updated': record.last_updated
                }
                rankings.append(ranking)
            return rankings

        # Fallback: gera ranking dinamicamente a partir dos favoritos
        capture_counts = db.query(
            FavoritePokemon.pokemon_id,
            FavoritePokemon.pokemon_name,
            func.count(FavoritePokemon.id).label('capture_count')
        ).group_by(
            FavoritePokemon.pokemon_id,
            FavoritePokemon.pokemon_name
        ).order_by(
            func.count(FavoritePokemon.id).desc()
        ).limit(limit).all()

        # Constr√≥i lista de ranking com dados din√¢micos
        rankings = []
        now = datetime.now()
        for i, (pokemon_id, pokemon_name, capture_count) in enumerate(capture_counts):
            ranking = {
                'id': i + 1,  # ID sequencial para compatibilidade
                'pokemon_id': pokemon_id,
                'pokemon_name': pokemon_name,
                'favorite_count': capture_count,
                'last_updated': now
            }
            rankings.append(ranking)

        return rankings

    @staticmethod
    def _update_ranking_from_captures(db: Session, pokemon_id: int, pokemon_name: str, increment: bool = True):
        """
        M√©todo de compatibilidade para atualiza√ß√£o de ranking.

        Este m√©todo √© mantido para compatibilidade com c√≥digo existente,
        mas o ranking real √© calculado dinamicamente no m√©todo get_ranking().

        Args:
            db: Sess√£o do banco de dados
            pokemon_id: ID do Pok√©mon
            pokemon_name: Nome do Pok√©mon
            increment: Se deve incrementar ou decrementar (n√£o usado)

        Note:
            M√©todo deprecated - o ranking √© calculado dinamicamente.
        """
        # M√©todo mantido apenas para compatibilidade
        # O ranking real √© calculado dinamicamente em get_ranking()
        pass

    @staticmethod
    def get_stats(db: Session) -> dict:
        """
        Busca estat√≠sticas gerais do sistema de favoritos.

        Calcula m√©tricas agregadas sobre o uso do sistema incluindo
        total de favoritos e o Pok√©mon mais popular.

        Args:
            db: Sess√£o do banco de dados

        Returns:
            dict: Dicion√°rio com estat√≠sticas do sistema
                - total_favorites: N√∫mero total de favoritos
                - most_popular_pokemon: Pok√©mon mais favoritado
        """
        # Conta total de favoritos no sistema
        total_captures = db.query(FavoritePokemon).count()

        # Busca o Pok√©mon mais favoritado
        most_captured = db.query(
            FavoritePokemon.pokemon_id,
            FavoritePokemon.pokemon_name,
            func.count(FavoritePokemon.id).label('capture_count')
        ).group_by(
            FavoritePokemon.pokemon_id,
            FavoritePokemon.pokemon_name
        ).order_by(
            func.count(FavoritePokemon.id).desc()
        ).first()

        # Cria objeto de ranking para o mais popular
        most_popular = None
        if most_captured:
            most_popular = PokemonRanking(
                pokemon_id=most_captured.pokemon_id,
                pokemon_name=most_captured.pokemon_name,
                favorite_count=most_captured.capture_count
            )

        return {
            "total_favorites": total_captures,
            "most_popular_pokemon": most_popular
        }

    @staticmethod
    def get_all_favorites(db: Session) -> List[FavoritePokemon]:
        """
        Busca todos os favoritos do sistema.

        M√©todo administrativo para obter todos os registros de favoritos
        de todos os usu√°rios.

        Args:
            db: Sess√£o do banco de dados

        Returns:
            List[FavoritePokemon]: Lista completa de favoritos do sistema

        Warning:
            Use com cuidado em sistemas com muitos dados.
        """
        return db.query(FavoritePokemon).all()

    @staticmethod
    def clear_all_favorites(db: Session, user_id: int) -> int:
        """
        Remove todos os favoritos de um usu√°rio espec√≠fico.

        M√©todo de emerg√™ncia para limpeza completa dos favoritos de um usu√°rio.
        A opera√ß√£o √© registrada em log para auditoria.

        Args:
            db: Sess√£o do banco de dados
            user_id: ID do usu√°rio cujos favoritos ser√£o removidos

        Returns:
            int: N√∫mero de favoritos removidos

        Warning:
            Opera√ß√£o irrevers√≠vel - use apenas em casos de emerg√™ncia.
        """
        import logging
        logger = logging.getLogger(__name__)

        logger.warning(f"üö® LIMPEZA EMERGENCIAL: Removendo TODOS os favoritos do usu√°rio ID {user_id}")

        # Conta quantos favoritos ser√£o removidos para log
        count_query = db.query(FavoritePokemon).filter(FavoritePokemon.user_id == user_id)
        deleted_count = count_query.count()

        # Remove todos os favoritos do usu√°rio
        count_query.delete()
        db.commit()

        logger.info(f"‚úÖ Limpeza conclu√≠da: {deleted_count} favoritos removidos para o usu√°rio ID {user_id}")

        return deleted_count
