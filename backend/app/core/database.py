"""
M√≥dulo de configura√ß√£o do banco de dados SQLAlchemy para o sistema PokeAPI_SYNC.

Este m√≥dulo configura a conex√£o com o banco de dados, criando o engine SQLAlchemy
com otimiza√ß√µes espec√≠ficas para diferentes tipos de bancos (SQLite, PostgreSQL, MySQL).
Tamb√©m define a sess√£o do banco de dados e fornece uma depend√™ncia FastAPI para
inje√ß√£o de depend√™ncias.

Funcionalidades:
- Configura√ß√£o autom√°tica de engine baseada no tipo de banco
- Otimiza√ß√µes de pool de conex√µes para diferentes ambientes
- Sess√£o thread-safe para opera√ß√µes de banco de dados
- Depend√™ncia FastAPI para inje√ß√£o de sess√£o do banco

Configura√ß√µes:
- SQLite: Otimizado para desenvolvimento local com threading habilitado
- PostgreSQL/MySQL: Configura√ß√µes para produ√ß√£o com pool de conex√µes
- Logging desabilitado por padr√£o (echo=False)

Exemplo de uso:
    ```python
    from fastapi import Depends, FastAPI
    from sqlalchemy.orm import Session
    from app.core.database import get_db, Base
    
    app = FastAPI()
    
    @app.get("/users")
    async def get_users(db: Session = Depends(get_db)):
        return db.query(User).all()
    ```
"""
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from .config import settings

# Engine do SQLAlchemy com configura√ß√µes otimizadas e persist√™ncia
# URL de conex√£o com o banco de dados obtida das configura√ß√µes
database_url = settings.get_database_url
print(f"üîç Usando banco de dados: {database_url}")

# Configura√ß√µes espec√≠ficas por tipo de banco de dados
# SQLite: Configura√ß√µes otimizadas para desenvolvimento local
# - check_same_thread=False: Permite uso em threads diferentes (necess√°rio para FastAPI)
# - pool_size=20: N√∫mero de conex√µes mantidas no pool
# - max_overflow=30: N√∫mero m√°ximo de conex√µes tempor√°rias acima do pool_size
# - pool_timeout=60: Tempo m√°ximo de espera por uma conex√£o
# - pool_recycle=3600: Recicla conex√µes ap√≥s 1 hora para evitar timeouts
# - pool_pre_ping=True: Verifica conex√µes antes de usar
# - echo=False: Desabilita logging SQL para performance
if "sqlite" in database_url:
    engine = create_engine(
        database_url,
        connect_args={"check_same_thread": False},
        pool_size=20,
        max_overflow=30,
        pool_timeout=60,
        pool_recycle=3600,
        pool_pre_ping=True,
        echo=False
    )
else:
    # PostgreSQL/MySQL: Configura√ß√µes otimizadas para produ√ß√£o
    # Valores mais conservadores para ambientes externos
    engine = create_engine(
        database_url,
        pool_size=10,
        max_overflow=20,
        pool_timeout=30,
        pool_recycle=1800,
        pool_pre_ping=True,
        echo=False
    )

# Session maker
# Factory para criar sess√µes do banco de dados com configura√ß√µes padr√£o
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Base para os modelos
# Classe base que todos os modelos SQLAlchemy devem herdar
Base = declarative_base()


def get_db():
    """Depend√™ncia FastAPI para obter sess√£o do banco de dados.

    Esta fun√ß√£o √© uma depend√™ncia do FastAPI que cria e fornece uma sess√£o
    do SQLAlchemy para cada requisi√ß√£o, garantindo que a sess√£o seja
    corretamente fechada ap√≥s o uso atrav√©s do gerenciador de contexto.

    Yields:
        Session: Sess√£o SQLAlchemy configurada para opera√ß√µes de banco de dados
                com transa√ß√µes autom√°ticas (autocommit=False) e autoflush desabilitado

    Usage:
        ```python
        from fastapi import Depends, FastAPI
        from sqlalchemy.orm import Session
        from app.core.database import get_db
        
        app = FastAPI()
        
        @app.post("/users")
        async def create_user(user_data: dict, db: Session = Depends(get_db)):
            # db √© uma sess√£o v√°lida e ser√° fechada automaticamente
            new_user = User(**user_data)
            db.add(new_user)
            db.commit()
            return new_user
        ```

    Notes:
        - A sess√£o √© criada no in√≠cio da requisi√ß√£o e fechada automaticamente
        - Usa yield para compatibilidade com gerenciadores de contexto do FastAPI
        - Configurado com autocommit=False para controle manual de transa√ß√µes
        - Autoflush=False para melhor performance em opera√ß√µes em lote
    """
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
