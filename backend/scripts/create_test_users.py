#!/usr/bin/env python3
"""
Script para criar usu√°rios de teste em produ√ß√£o.
Este script cria os usu√°rios teste@teste.com e teste2@teste.com
que s√£o documentados no README e usados para demonstra√ß√£o.
"""
import os
import sys
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# Adicionar o diret√≥rio backend ao path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from app.core.config import Settings
from app.models.models import Base, User
from app.services.auth_service import auth_service
from app.schemas.auth_schemas import UserCreate


def create_test_users():
    """Cria os usu√°rios de teste padr√£o."""
    print("üîß Criando usu√°rios de teste para produ√ß√£o...")
    
    # Configura√ß√µes
    settings = Settings()
    print(f"üìã Database URL: {settings.database_url}")
    
    # Criar engine
    engine = create_engine(settings.database_url)
    SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
    
    # Criar tabelas se n√£o existirem
    Base.metadata.create_all(bind=engine)
    
    # Sess√£o do banco
    db = SessionLocal()
    
    try:
        # Usu√°rios de teste para criar
        test_users = [
            {
                "name": "Usu√°rio Teste Principal",
                "email": "teste@teste.com",
                "password": "Teste123",
                "security_question": "Qual √© o seu Pok√©mon favorito?",
                "security_answer": "pikachu"
            },
            {
                "name": "Usu√°rio Teste Secund√°rio", 
                "email": "teste2@teste.com",
                "password": "Teste123",
                "security_question": "Qual √© o seu Pok√©mon favorito?",
                "security_answer": "charizard"
            }
        ]
        
        for user_info in test_users:
            print(f"\nüë§ Processando usu√°rio: {user_info['email']}")
            
            # Verificar se usu√°rio j√° existe
            existing_user = auth_service.get_user_by_email(db, user_info['email'])
            if existing_user:
                print(f"‚úÖ Usu√°rio {user_info['email']} j√° existe")
                continue
            
            # Criar novo usu√°rio
            user_data = UserCreate(
                name=user_info['name'],
                email=user_info['email'],
                password=user_info['password'],
                security_question=user_info['security_question'],
                security_answer=user_info['security_answer']
            )
            
            new_user = auth_service.create_user(db, user_data)
            print(f"‚úÖ Usu√°rio criado: {new_user.email} (ID: {new_user.id})")
        
        print("\nüéâ Usu√°rios de teste criados com sucesso!")
        print("\nüìã Credenciais dispon√≠veis:")
        print("   Email: teste@teste.com | Senha: Teste123")
        print("   Email: teste2@teste.com | Senha: Teste123")
        
    except Exception as e:
        print(f"‚ùå Erro ao criar usu√°rios: {e}")
        import traceback
        traceback.print_exc()
        return False
    finally:
        db.close()
    
    return True


if __name__ == "__main__":
    success = create_test_users()
    sys.exit(0 if success else 1)
