#!/usr/bin/env node

/**
 * Script para executar todos os testes de autentica√ß√£o
 * Inclui testes unit√°rios, de integra√ß√£o e E2E
 */

const { execSync, spawn } = require('child_process');
const fs = require('fs');
const path = require('path');

class AuthTestRunner {
  constructor() {
    this.results = {
      unit: { passed: 0, failed: 0, total: 0 },
      integration: { passed: 0, failed: 0, total: 0 },
      e2e: { passed: 0, failed: 0, total: 0 }
    };
    this.startTime = Date.now();
  }

  log(message, type = 'info') {
    const timestamp = new Date().toISOString();
    const colors = {
      info: '\x1b[36m',    // Cyan
      success: '\x1b[32m', // Green
      error: '\x1b[31m',   // Red
      warning: '\x1b[33m', // Yellow
      reset: '\x1b[0m'     // Reset
    };

    console.log(`${colors[type]}[${timestamp}] ${message}${colors.reset}`);
  }

  async checkPrerequisites() {
    this.log('üîç Verificando pr√©-requisitos...', 'info');

    // Verificar se o Angular CLI est√° instalado
    try {
      execSync('ng version', { stdio: 'pipe' });
      this.log('‚úÖ Angular CLI encontrado', 'success');
    } catch (error) {
      this.log('‚ùå Angular CLI n√£o encontrado. Instale com: npm install -g @angular/cli', 'error');
      process.exit(1);
    }

    // Verificar se as depend√™ncias est√£o instaladas
    if (!fs.existsSync('node_modules')) {
      this.log('‚ùå Depend√™ncias n√£o encontradas. Execute: npm install', 'error');
      process.exit(1);
    }

    // Verificar se o backend est√° rodando
    try {
      const response = await fetch('http://localhost:8000/health');
      if (response.ok) {
        this.log('‚úÖ Backend est√° rodando na porta 8000', 'success');
      } else {
        this.log('‚ö†Ô∏è  Backend n√£o est√° respondendo corretamente', 'warning');
      }
    } catch (error) {
      this.log('‚ö†Ô∏è  Backend n√£o est√° rodando na porta 8000', 'warning');
      this.log('   Para testes E2E, inicie o backend primeiro', 'warning');
    }

    this.log('‚úÖ Pr√©-requisitos verificados', 'success');
  }

  async runUnitTests() {
    this.log('üß™ Executando testes unit√°rios de autentica√ß√£o...', 'info');

    try {
      const result = execSync(
        'ng test --watch=false --browsers=ChromeHeadless --include="**/auth*.spec.ts"',
        { encoding: 'utf8', stdio: 'pipe' }
      );

      // Parsear resultados
      const passedMatch = result.match(/(\d+) passed/);
      const failedMatch = result.match(/(\d+) failed/);
      
      this.results.unit.passed = passedMatch ? parseInt(passedMatch[1]) : 0;
      this.results.unit.failed = failedMatch ? parseInt(failedMatch[1]) : 0;
      this.results.unit.total = this.results.unit.passed + this.results.unit.failed;

      if (this.results.unit.failed === 0) {
        this.log(`‚úÖ Testes unit√°rios: ${this.results.unit.passed} passaram`, 'success');
      } else {
        this.log(`‚ùå Testes unit√°rios: ${this.results.unit.failed} falharam`, 'error');
      }

      return this.results.unit.failed === 0;
    } catch (error) {
      this.log('‚ùå Erro ao executar testes unit√°rios', 'error');
      this.log(error.message, 'error');
      return false;
    }
  }

  async runIntegrationTests() {
    this.log('üîó Executando testes de integra√ß√£o...', 'info');

    try {
      // Executar testes de integra√ß√£o espec√≠ficos
      const result = execSync(
        'ng test --watch=false --browsers=ChromeHeadless --include="**/auth-integration*.spec.ts"',
        { encoding: 'utf8', stdio: 'pipe' }
      );

      // Parsear resultados (similar aos testes unit√°rios)
      const passedMatch = result.match(/(\d+) passed/);
      const failedMatch = result.match(/(\d+) failed/);
      
      this.results.integration.passed = passedMatch ? parseInt(passedMatch[1]) : 0;
      this.results.integration.failed = failedMatch ? parseInt(failedMatch[1]) : 0;
      this.results.integration.total = this.results.integration.passed + this.results.integration.failed;

      if (this.results.integration.failed === 0) {
        this.log(`‚úÖ Testes de integra√ß√£o: ${this.results.integration.passed} passaram`, 'success');
      } else {
        this.log(`‚ùå Testes de integra√ß√£o: ${this.results.integration.failed} falharam`, 'error');
      }

      return this.results.integration.failed === 0;
    } catch (error) {
      this.log('‚ùå Erro ao executar testes de integra√ß√£o', 'error');
      this.log(error.message, 'error');
      return false;
    }
  }

  async runE2ETests() {
    this.log('üåê Executando testes E2E de autentica√ß√£o...', 'info');

    try {
      // Verificar se o servidor de desenvolvimento est√° rodando
      let devServerRunning = false;
      try {
        const response = await fetch('http://localhost:8100');
        devServerRunning = response.ok;
      } catch (error) {
        // Servidor n√£o est√° rodando
      }

      if (!devServerRunning) {
        this.log('üöÄ Iniciando servidor de desenvolvimento...', 'info');
        const devServer = spawn('ng', ['serve', '--port=8100'], {
          detached: true,
          stdio: 'pipe'
        });

        // Aguardar o servidor iniciar
        await this.waitForServer('http://localhost:8100', 60000);
        this.log('‚úÖ Servidor de desenvolvimento iniciado', 'success');
      }

      // Executar testes E2E
      const result = execSync(
        'ng e2e --spec="**/auth-flow.e2e-spec.ts"',
        { encoding: 'utf8', stdio: 'pipe' }
      );

      // Parsear resultados
      const passedMatch = result.match(/(\d+) passed/);
      const failedMatch = result.match(/(\d+) failed/);
      
      this.results.e2e.passed = passedMatch ? parseInt(passedMatch[1]) : 0;
      this.results.e2e.failed = failedMatch ? parseInt(failedMatch[1]) : 0;
      this.results.e2e.total = this.results.e2e.passed + this.results.e2e.failed;

      if (this.results.e2e.failed === 0) {
        this.log(`‚úÖ Testes E2E: ${this.results.e2e.passed} passaram`, 'success');
      } else {
        this.log(`‚ùå Testes E2E: ${this.results.e2e.failed} falharam`, 'error');
      }

      return this.results.e2e.failed === 0;
    } catch (error) {
      this.log('‚ùå Erro ao executar testes E2E', 'error');
      this.log(error.message, 'error');
      return false;
    }
  }

  async waitForServer(url, timeout = 30000) {
    const start = Date.now();
    while (Date.now() - start < timeout) {
      try {
        const response = await fetch(url);
        if (response.ok) return true;
      } catch (error) {
        // Continuar tentando
      }
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    throw new Error(`Servidor n√£o respondeu em ${url} ap√≥s ${timeout}ms`);
  }

  generateReport() {
    const duration = Date.now() - this.startTime;
    const totalPassed = this.results.unit.passed + this.results.integration.passed + this.results.e2e.passed;
    const totalFailed = this.results.unit.failed + this.results.integration.failed + this.results.e2e.failed;
    const totalTests = totalPassed + totalFailed;

    this.log('\nüìä RELAT√ìRIO DE TESTES DE AUTENTICA√á√ÉO', 'info');
    this.log('=' .repeat(50), 'info');
    
    this.log(`‚è±Ô∏è  Dura√ß√£o total: ${Math.round(duration / 1000)}s`, 'info');
    this.log(`üìà Total de testes: ${totalTests}`, 'info');
    this.log(`‚úÖ Passaram: ${totalPassed}`, 'success');
    this.log(`‚ùå Falharam: ${totalFailed}`, totalFailed > 0 ? 'error' : 'info');
    
    this.log('\nüìã Detalhes por categoria:', 'info');
    this.log(`   üß™ Unit√°rios: ${this.results.unit.passed}/${this.results.unit.total}`, 'info');
    this.log(`   üîó Integra√ß√£o: ${this.results.integration.passed}/${this.results.integration.total}`, 'info');
    this.log(`   üåê E2E: ${this.results.e2e.passed}/${this.results.e2e.total}`, 'info');

    // Calcular cobertura (simulada)
    const coverage = totalTests > 0 ? Math.round((totalPassed / totalTests) * 100) : 0;
    this.log(`\nüìä Taxa de sucesso: ${coverage}%`, coverage >= 90 ? 'success' : 'warning');

    // Salvar relat√≥rio em arquivo
    const report = {
      timestamp: new Date().toISOString(),
      duration: Math.round(duration / 1000),
      results: this.results,
      summary: {
        total: totalTests,
        passed: totalPassed,
        failed: totalFailed,
        successRate: coverage
      }
    };

    fs.writeFileSync('auth-test-report.json', JSON.stringify(report, null, 2));
    this.log('üíæ Relat√≥rio salvo em: auth-test-report.json', 'info');

    return totalFailed === 0;
  }

  async run() {
    try {
      this.log('üöÄ Iniciando execu√ß√£o de testes de autentica√ß√£o', 'info');
      
      await this.checkPrerequisites();

      const unitSuccess = await this.runUnitTests();
      const integrationSuccess = await this.runIntegrationTests();
      const e2eSuccess = await this.runE2ETests();

      const allSuccess = this.generateReport();

      if (allSuccess) {
        this.log('\nüéâ Todos os testes de autentica√ß√£o passaram!', 'success');
        process.exit(0);
      } else {
        this.log('\nüí• Alguns testes falharam. Verifique o relat√≥rio.', 'error');
        process.exit(1);
      }

    } catch (error) {
      this.log(`üí• Erro fatal: ${error.message}`, 'error');
      process.exit(1);
    }
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  const runner = new AuthTestRunner();
  runner.run();
}

module.exports = AuthTestRunner;
