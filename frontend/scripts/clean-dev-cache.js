#!/usr/bin/env node

/**
 * Script para limpar cache e arquivos tempor√°rios que podem causar loops de recompila√ß√£o
 */

const fs = require('fs');
const path = require('path');

const DIRECTORIES_TO_CLEAN = [
  '.angular',
  'node_modules/.cache',
  'www',
  'dist',
  'test-results',
  'playwright-report/data',
  '.tmp',
  'tmp'
];

const FILES_TO_CLEAN = [
  '*.log',
  '*.tmp',
  '*.temp',
  'debug-*.png',
  'debug-*.html'
];

/**
 * Remove um diret√≥rio recursivamente
 */
function removeDirectory(dirPath) {
  if (fs.existsSync(dirPath)) {
    try {
      fs.rmSync(dirPath, { recursive: true, force: true });
      console.log(`‚úÖ Removido: ${dirPath}`);
      return true;
    } catch (error) {
      console.log(`‚ùå Erro ao remover ${dirPath}: ${error.message}`);
      return false;
    }
  } else {
    console.log(`‚è≠Ô∏è N√£o existe: ${dirPath}`);
    return true;
  }
}

/**
 * Remove arquivos por padr√£o
 */
function removeFilesByPattern(pattern) {
  const glob = require('glob');
  
  try {
    const files = glob.sync(pattern, { ignore: 'node_modules/**' });
    
    files.forEach(file => {
      try {
        fs.unlinkSync(file);
        console.log(`‚úÖ Removido arquivo: ${file}`);
      } catch (error) {
        console.log(`‚ùå Erro ao remover arquivo ${file}: ${error.message}`);
      }
    });
    
    return files.length;
  } catch (error) {
    console.log(`‚ùå Erro ao buscar arquivos ${pattern}: ${error.message}`);
    return 0;
  }
}

/**
 * Fun√ß√£o principal
 */
function main() {
  console.log('üßπ Limpando cache e arquivos tempor√°rios...');
  console.log('=' .repeat(50));
  
  let totalCleaned = 0;
  
  // Limpar diret√≥rios
  console.log('\nüìÅ Limpando diret√≥rios:');
  DIRECTORIES_TO_CLEAN.forEach(dir => {
    if (removeDirectory(dir)) {
      totalCleaned++;
    }
  });
  
  // Limpar arquivos por padr√£o
  console.log('\nüìÑ Limpando arquivos tempor√°rios:');
  FILES_TO_CLEAN.forEach(pattern => {
    const count = removeFilesByPattern(pattern);
    if (count > 0) {
      console.log(`‚úÖ Removidos ${count} arquivos: ${pattern}`);
      totalCleaned += count;
    }
  });
  
  // Limpar cache do npm se existir
  console.log('\nüì¶ Limpando cache do npm:');
  try {
    const { execSync } = require('child_process');
    execSync('npm cache clean --force', { stdio: 'inherit' });
    console.log('‚úÖ Cache do npm limpo');
  } catch (error) {
    console.log('‚ö†Ô∏è N√£o foi poss√≠vel limpar cache do npm:', error.message);
  }
  
  console.log('\n' + '=' .repeat(50));
  console.log(`üéâ Limpeza conclu√≠da! ${totalCleaned} itens removidos.`);
  console.log('\nüí° Dicas para evitar loops de recompila√ß√£o:');
  console.log('   ‚Ä¢ Execute este script quando houver problemas');
  console.log('   ‚Ä¢ Evite editar arquivos em www/ ou dist/');
  console.log('   ‚Ä¢ Use .gitignore para ignorar arquivos tempor√°rios');
  console.log('   ‚Ä¢ Reinicie o servidor de desenvolvimento ap√≥s a limpeza');
  
  console.log('\nüöÄ Para reiniciar o desenvolvimento:');
  console.log('   npm start');
}

// Verificar se glob est√° dispon√≠vel
try {
  require('glob');
} catch (error) {
  console.log('‚ö†Ô∏è M√≥dulo "glob" n√£o encontrado. Instalando...');
  try {
    const { execSync } = require('child_process');
    execSync('npm install glob --save-dev', { stdio: 'inherit' });
    console.log('‚úÖ M√≥dulo "glob" instalado com sucesso');
  } catch (installError) {
    console.log('‚ùå Erro ao instalar "glob":', installError.message);
    console.log('üí° Execute manualmente: npm install glob --save-dev');
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main();
}

module.exports = { removeDirectory, removeFilesByPattern };
