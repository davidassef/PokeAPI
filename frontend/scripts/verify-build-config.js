#!/usr/bin/env node

/**
 * Script para verificar se a configura√ß√£o de build est√° correta
 * Especialmente importante para deployments no Vercel
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Verificando configura√ß√£o de build...\n');

// 1. Verificar se os arquivos de environment existem
const envFiles = [
  'src/environments/environment.ts',
  'src/environments/environment.prod.ts'
];

console.log('üìÅ Verificando arquivos de environment:');
envFiles.forEach(file => {
  const fullPath = path.join(__dirname, '..', file);
  if (fs.existsSync(fullPath)) {
    console.log(`‚úÖ ${file} - OK`);
    
    // Ler conte√∫do e mostrar URL da API
    const content = fs.readFileSync(fullPath, 'utf8');
    const apiUrlMatch = content.match(/apiUrl:\s*['"`]([^'"`]+)['"`]/);
    if (apiUrlMatch) {
      console.log(`   üì° API URL: ${apiUrlMatch[1]}`);
    }
  } else {
    console.log(`‚ùå ${file} - FALTANDO`);
  }
});

// 2. Verificar angular.json
console.log('\nüìã Verificando angular.json:');
const angularJsonPath = path.join(__dirname, '..', 'angular.json');
if (fs.existsSync(angularJsonPath)) {
  try {
    const angularJson = JSON.parse(fs.readFileSync(angularJsonPath, 'utf8'));
    const prodConfig = angularJson.projects.app.architect.build.configurations.production;
    
    if (prodConfig && prodConfig.fileReplacements) {
      console.log('‚úÖ Configura√ß√£o de produ√ß√£o encontrada');
      console.log('‚úÖ fileReplacements configurado:');
      prodConfig.fileReplacements.forEach(replacement => {
        console.log(`   üìù ${replacement.replace} ‚Üí ${replacement.with}`);
      });
    } else {
      console.log('‚ùå Configura√ß√£o de produ√ß√£o n√£o encontrada ou incompleta');
    }
  } catch (error) {
    console.log('‚ùå Erro ao ler angular.json:', error.message);
  }
} else {
  console.log('‚ùå angular.json n√£o encontrado');
}

// 3. Verificar package.json scripts
console.log('\nüöÄ Verificando scripts de build:');
const packageJsonPath = path.join(__dirname, '..', 'package.json');
if (fs.existsSync(packageJsonPath)) {
  try {
    const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
    const buildScripts = ['build', 'build:prod', 'build:vercel'];
    
    buildScripts.forEach(script => {
      if (packageJson.scripts[script]) {
        console.log(`‚úÖ ${script}: ${packageJson.scripts[script]}`);
      } else {
        console.log(`‚ùå ${script}: n√£o encontrado`);
      }
    });
  } catch (error) {
    console.log('‚ùå Erro ao ler package.json:', error.message);
  }
} else {
  console.log('‚ùå package.json n√£o encontrado');
}

// 4. Verificar vercel.json
console.log('\nüåê Verificando vercel.json:');
const vercelJsonPath = path.join(__dirname, '..', 'vercel.json');
if (fs.existsSync(vercelJsonPath)) {
  try {
    const vercelJson = JSON.parse(fs.readFileSync(vercelJsonPath, 'utf8'));
    console.log(`‚úÖ Build command: ${vercelJson.buildCommand}`);
    console.log(`‚úÖ Output directory: ${vercelJson.outputDirectory}`);
    
    if (vercelJson.env) {
      console.log('‚úÖ Environment variables:');
      Object.entries(vercelJson.env).forEach(([key, value]) => {
        console.log(`   üîß ${key}: ${value}`);
      });
    }
  } catch (error) {
    console.log('‚ùå Erro ao ler vercel.json:', error.message);
  }
} else {
  console.log('‚ùå vercel.json n√£o encontrado');
}

// 5. Verificar se o diret√≥rio de build existe
console.log('\nüì¶ Verificando diret√≥rio de build:');
const buildDir = path.join(__dirname, '..', 'www');
if (fs.existsSync(buildDir)) {
  console.log('‚úÖ Diret√≥rio www/ existe');
  
  // Verificar se h√° arquivos de build
  const files = fs.readdirSync(buildDir);
  if (files.length > 0) {
    console.log(`‚úÖ ${files.length} arquivos encontrados no build`);
    
    // Verificar se h√° um main.js (indicativo de build Angular)
    const mainFiles = files.filter(f => f.startsWith('main.') && f.endsWith('.js'));
    if (mainFiles.length > 0) {
      console.log(`‚úÖ Arquivo main.js encontrado: ${mainFiles[0]}`);
    }
  } else {
    console.log('‚ö†Ô∏è  Diret√≥rio www/ est√° vazio');
  }
} else {
  console.log('‚ö†Ô∏è  Diret√≥rio www/ n√£o existe (normal se n√£o foi buildado ainda)');
}

// 6. Recomenda√ß√µes
console.log('\nüí° Recomenda√ß√µes:');
console.log('1. Execute "npm run build:vercel" para testar o build localmente');
console.log('2. Verifique se o arquivo www/main.*.js cont√©m a URL correta da API');
console.log('3. No Vercel, certifique-se de que est√° usando o comando "npm run build:vercel"');
console.log('4. Ap√≥s deploy, verifique se a URL da API est√° correta no console do navegador');

console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!');
