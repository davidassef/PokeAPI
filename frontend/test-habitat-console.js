// Script para testar o sistema de habitat diretamente no console do navegador
// Copie e cole este c√≥digo no console do navegador (F12) quando estiver na p√°gina inicial

console.log('üß™ Iniciando teste manual do sistema de habitat...');

// Fun√ß√£o para testar o mapeamento expandido
function testHabitatMapping() {
    console.log('üìä Testando mapeamento expandido de habitats...');
    
    // Simular a fun√ß√£o generateExpandedHabitatMapping
    const manualMapping = {
        // Gera√ß√£o 1 - Kanto (1-151)
        1: 'grassland', 2: 'grassland', 3: 'grassland', // Bulbasaur line
        4: 'mountain', 5: 'mountain', 6: 'mountain', // Charmander line
        7: 'waters-edge', 8: 'waters-edge', 9: 'waters-edge', // Squirtle line
        25: 'forest', 26: 'forest', // Pikachu line
        150: 'rare', // Mewtwo
        151: 'rare', // Mew
    };

    const getHabitatByTypes = (pokemonId) => {
        // Gera√ß√£o 2 (152-251)
        if (pokemonId >= 152 && pokemonId <= 251) {
            if ([152, 153, 154].includes(pokemonId)) return 'grassland'; // Chikorita line
            if ([155, 156, 157].includes(pokemonId)) return 'mountain'; // Cyndaquil line  
            if ([158, 159, 160].includes(pokemonId)) return 'waters-edge'; // Totodile line
            if ([243, 244, 245].includes(pokemonId)) return 'rare'; // Raikou/Entei/Suicune
            if ([249, 250].includes(pokemonId)) return 'rare'; // Lugia/Ho-Oh
            if (pokemonId === 251) return 'rare'; // Celebi
        }

        // Gera√ß√£o 3 (252-386)
        if (pokemonId >= 252 && pokemonId <= 386) {
            if ([252, 253, 254].includes(pokemonId)) return 'forest'; // Treecko line
            if ([255, 256, 257].includes(pokemonId)) return 'mountain'; // Torchic line
            if ([258, 259, 260].includes(pokemonId)) return 'waters-edge'; // Mudkip line
            if ([377, 378, 379, 380, 381, 382, 383, 384, 385, 386].includes(pokemonId)) return 'rare';
        }

        // Distribui√ß√£o baseada em m√≥dulo para variedade
        const mod = pokemonId % 9;
        switch (mod) {
            case 0: return 'waters-edge';
            case 1: return 'forest';
            case 2: return 'grassland';
            case 3: return 'mountain';
            case 4: return 'cave';
            case 5: return 'urban';
            case 6: return 'rough-terrain';
            case 7: return 'sea';
            case 8: return 'rare';
            default: return 'grassland';
        }
    };

    const expandedMapping = { ...manualMapping };
    for (let id = 1; id <= 1000; id++) {
        if (!expandedMapping[id]) {
            expandedMapping[id] = getHabitatByTypes(id);
        }
    }

    // Verificar cobertura
    const totalMapped = Object.keys(expandedMapping).length;
    const forestPokemon = Object.entries(expandedMapping).filter(([id, habitat]) => habitat === 'forest').length;
    const mountainPokemon = Object.entries(expandedMapping).filter(([id, habitat]) => habitat === 'mountain').length;
    const watersPokemon = Object.entries(expandedMapping).filter(([id, habitat]) => habitat === 'waters-edge').length;
    const rarePokemon = Object.entries(expandedMapping).filter(([id, habitat]) => habitat === 'rare').length;

    console.log(`‚úÖ Total de Pok√©mon mapeados: ${totalMapped}`);
    console.log(`üå≤ Floresta: ${forestPokemon} Pok√©mon`);
    console.log(`üèîÔ∏è Montanha: ${mountainPokemon} Pok√©mon`);
    console.log(`üåä √Åguas: ${watersPokemon} Pok√©mon`);
    console.log(`üíé Raro: ${rarePokemon} Pok√©mon`);

    // Verificar Pok√©mon espec√≠ficos
    console.log(`üéØ Pikachu (#25): ${expandedMapping[25]} (deve ser 'forest')`);
    console.log(`üéØ Charmander (#4): ${expandedMapping[4]} (deve ser 'mountain')`);
    console.log(`üéØ Squirtle (#7): ${expandedMapping[7]} (deve ser 'waters-edge')`);
    console.log(`üéØ Mewtwo (#150): ${expandedMapping[150]} (deve ser 'rare')`);
    console.log(`üéØ Chikorita (#152): ${expandedMapping[152]} (deve ser 'grassland')`);
    console.log(`üéØ Treecko (#252): ${expandedMapping[252]} (deve ser 'forest')`);

    return expandedMapping;
}

// Fun√ß√£o para testar filtro programaticamente
function testHabitatFilter() {
    console.log('üîç Testando filtro de habitat programaticamente...');
    
    // Tentar acessar o servi√ßo Angular
    try {
        // Buscar elemento Angular
        const appElement = document.querySelector('app-root');
        if (appElement) {
            console.log('‚úÖ Elemento Angular encontrado');
            
            // Tentar simular filtro de habitat
            const mapping = testHabitatMapping();
            
            // Simular filtro de floresta
            const forestPokemon = Object.entries(mapping)
                .filter(([id, habitat]) => habitat === 'forest')
                .map(([id]) => parseInt(id));
            
            console.log(`üå≤ Pok√©mon de floresta encontrados: ${forestPokemon.length}`);
            console.log(`üéØ Primeiros 10: ${forestPokemon.slice(0, 10).join(', ')}`);
            
            // Simular pagina√ß√£o
            const pageSize = 20;
            const page1 = forestPokemon.slice(0, pageSize);
            const page2 = forestPokemon.slice(pageSize, pageSize * 2);
            
            console.log(`üìÑ P√°gina 1: ${page1.length} Pok√©mon`);
            console.log(`üìÑ P√°gina 2: ${page2.length} Pok√©mon`);
            
            if (page1.length > 1) {
                console.log('‚úÖ Pagina√ß√£o corrigida - m√∫ltiplos Pok√©mon por p√°gina');
            } else {
                console.log('‚ùå Problema de pagina√ß√£o - apenas 1 Pok√©mon por p√°gina');
            }
            
        } else {
            console.log('‚ùå Elemento Angular n√£o encontrado');
        }
    } catch (error) {
        console.log('‚ùå Erro ao acessar servi√ßo:', error);
    }
}

// Fun√ß√£o para verificar se h√° chips de habitat na p√°gina
function checkHabitatChips() {
    console.log('üè∑Ô∏è Verificando chips de habitat na p√°gina...');
    
    const habitatChips = document.querySelectorAll('.filter-section ion-chip');
    console.log(`üè∑Ô∏è Total de chips encontrados: ${habitatChips.length}`);
    
    habitatChips.forEach((chip, index) => {
        const text = chip.textContent?.trim();
        console.log(`üè∑Ô∏è Chip ${index + 1}: ${text}`);
    });
    
    // Verificar se h√° se√ß√£o de habitats
    const habitatSection = document.querySelector('.filter-section:has-text("Habitats")');
    if (habitatSection) {
        console.log('‚úÖ Se√ß√£o de habitats encontrada');
    } else {
        console.log('‚ö†Ô∏è Se√ß√£o de habitats n√£o encontrada');
    }
}

// Fun√ß√£o para simular clique em chip
function simulateHabitatClick(chipText) {
    console.log(`üéØ Tentando simular clique no chip: ${chipText}`);
    
    const chips = document.querySelectorAll('.filter-section ion-chip');
    let targetChip = null;
    
    chips.forEach(chip => {
        if (chip.textContent?.toLowerCase().includes(chipText.toLowerCase())) {
            targetChip = chip;
        }
    });
    
    if (targetChip) {
        console.log(`‚úÖ Chip encontrado: ${targetChip.textContent?.trim()}`);
        
        // Tentar diferentes m√©todos de clique
        try {
            targetChip.click();
            console.log('‚úÖ Clique direto executado');
        } catch (error) {
            console.log('‚ö†Ô∏è Clique direto falhou:', error);
            
            // Tentar evento de clique
            try {
                const event = new MouseEvent('click', { bubbles: true });
                targetChip.dispatchEvent(event);
                console.log('‚úÖ Evento de clique executado');
            } catch (error2) {
                console.log('‚ùå Evento de clique falhou:', error2);
            }
        }
    } else {
        console.log(`‚ùå Chip n√£o encontrado: ${chipText}`);
    }
}

// Executar testes
console.log('üöÄ Executando testes...');
testHabitatMapping();
console.log('---');
testHabitatFilter();
console.log('---');
checkHabitatChips();
console.log('---');

// Instru√ß√µes para teste manual
console.log('üìã INSTRU√á√ïES PARA TESTE MANUAL:');
console.log('1. Execute: simulateHabitatClick("floresta") para testar filtro de floresta');
console.log('2. Execute: simulateHabitatClick("montanha") para testar filtro de montanha');
console.log('3. Execute: simulateHabitatClick("raro") para testar filtro de raros');
console.log('4. Observe o console para logs do sistema');
console.log('5. Verifique se h√° "Carregando Pok√©mons..." em loop');

console.log('‚úÖ Teste manual do sistema de habitat conclu√≠do!');
