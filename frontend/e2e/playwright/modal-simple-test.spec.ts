import { test, expect } from '@playwright/test';

/**
 * Teste simples e funcional para validar as corre√ß√µes do modal
 */

test.describe('Teste Simples do Modal', () => {

  test('Teste b√°sico: Abrir modal e verificar funcionamento', async ({ page }) => {
    console.log('üß™ Teste b√°sico do modal...');

    // Navegar para a p√°gina inicial
    await page.goto('/');

    // Aguardar carregamento
    await page.waitForSelector('app-pokemon-card', { timeout: 15000 });
    await page.waitForTimeout(3000);

    console.log('üìã P√°gina carregada');

    // Clicar no primeiro card
    const firstPokemonCard = page.locator('app-pokemon-card').first();
    await firstPokemonCard.click();

    console.log('üñ±Ô∏è Clicou no card');

    // Aguardar um tempo maior para o modal carregar
    await page.waitForTimeout(5000);

    // Verificar se o modal existe e tem o atributo correto
    const modal = page.locator('app-details-modal[ng-reflect-is-open="true"]');
    const modalExists = await modal.count();

    console.log(`üìä Modal com is-open=true: ${modalExists}`);

    // Aguardar especificamente pelo carregamento do conte√∫do do modal
    try {
      await page.waitForSelector('app-details-modal .tab-btn', { timeout: 10000 });
      console.log('‚úÖ Abas carregaram com sucesso');
    } catch (error) {
      console.log('‚ö†Ô∏è Timeout aguardando abas - continuando diagn√≥stico...');
    }

    if (modalExists > 0) {
      // Aguardar mais tempo para o conte√∫do carregar
      await page.waitForTimeout(3000);

      // Verificar se h√° abas dentro do modal especificamente
      const tabsInModal = await modal.locator('.tab-btn').count();
      console.log(`üìë Abas dentro do modal: ${tabsInModal}`);

      if (tabsInModal > 0) {
        console.log('‚úÖ Modal tem abas - tentando navegar para Curiosidades');

        // Tentar clicar na aba Curiosidades
        const curiositiesTab = modal.locator('.tab-btn').filter({ hasText: /Curiosidades|Curiosities/ });
        const curiositiesCount = await curiositiesTab.count();

        console.log(`üîç Abas de Curiosidades encontradas: ${curiositiesCount}`);

        if (curiositiesCount > 0) {
          await curiositiesTab.first().click();
          console.log('üñ±Ô∏è Clicou na aba Curiosidades');

          // Aguardar carregamento da aba
          await page.waitForTimeout(5000);

          // Verificar se a se√ß√£o de curiosidades apareceu
          const curiositiesContent = modal.locator('.curiosities-content');
          const curiositiesVisible = await curiositiesContent.count();

          console.log(`üìÑ Conte√∫do de curiosidades: ${curiositiesVisible}`);

          // ‚úÖ NOVO DEBUG: Verificar estado interno do componente
          const debugInfo = await page.evaluate(() => {
            const modal = document.querySelector('app-details-modal') as any;
            if (modal && modal.componentInstance) {
              const component = modal.componentInstance;
              return {
                pokemon: !!component.pokemon,
                flavorTexts: component.flavorTexts?.length || 0,
                tabDataLoaded: component.tabDataLoaded,
                activeTab: component.activeTab,
                isCuriositiesDataReady: component.isCuriositiesDataReady()
              };
            }
            return null;
          });

          console.log('üîç Debug info:', JSON.stringify(debugInfo, null, 2));

          // ‚úÖ NOVO DEBUG: Verificar elementos espec√≠ficos
          const tabLoadingElements = await modal.locator('.tab-loading').count();
          const loadingSpinners = await modal.locator('.loading-spinner').count();
          const flavorTexts = await modal.locator('.flavor-text').count();
          console.log('üìä Tab loading elements:', tabLoadingElements);
          console.log('‚è≥ Spinners de loading:', loadingSpinners);
          console.log('üí¨ Flavor texts encontrados:', flavorTexts);

          if (curiositiesVisible > 0) {
            console.log('‚úÖ SUCESSO: Se√ß√£o Curiosidades carregou!');

            // Verificar se h√° conte√∫do real
            const hasRealContent = await curiositiesContent.locator('.info-section, .habitat-info, .flavor-text').count();
            console.log(`üìù Conte√∫do real encontrado: ${hasRealContent}`);

            if (hasRealContent > 0) {
              console.log('üéâ PERFEITO: Curiosidades tem conte√∫do real!');
            }
          } else {
            console.log('‚ùå PROBLEMA: Se√ß√£o Curiosidades n√£o apareceu');

            if (loadingSpinners > 0) {
              console.log('‚ö†Ô∏è ATEN√á√ÉO: Ainda h√° spinners de loading');
            }

            if (tabLoadingElements > 0) {
              console.log('‚ö†Ô∏è ATEN√á√ÉO: H√° elementos de tab loading');
            }
          }
        } else {
          console.log('‚ùå PROBLEMA: Aba Curiosidades n√£o encontrada');
        }
      } else {
        console.log('‚ùå PROBLEMA: Modal n√£o tem abas');

        // Verificar se h√° algum conte√∫do no modal
        const modalContent = await modal.innerHTML();
        console.log(`üìÑ Conte√∫do HTML do modal (primeiros 200 chars): ${modalContent.substring(0, 200)}...`);
      }
    } else {
      console.log('‚ùå PROBLEMA: Modal n√£o foi encontrado');
    }

    // Tirar screenshot final
    await page.screenshot({ path: 'modal-simple-test.png', fullPage: true });
    console.log('üì∏ Screenshot salvo');
  });

  test('Teste de evolu√ß√£o: Verificar se se√ß√£o de evolu√ß√£o carrega', async ({ page }) => {
    console.log('üß™ Teste da se√ß√£o de evolu√ß√£o...');

    await page.goto('/');
    await page.waitForSelector('app-pokemon-card', { timeout: 15000 });
    await page.waitForTimeout(3000);

    // Clicar no primeiro card
    const firstPokemonCard = page.locator('app-pokemon-card').first();
    await firstPokemonCard.click();
    await page.waitForTimeout(5000);

    const modal = page.locator('app-details-modal[ng-reflect-is-open="true"]');
    const modalExists = await modal.count();

    if (modalExists > 0) {
      // Tentar clicar na aba Evolu√ß√£o
      const evolutionTab = modal.locator('.tab-btn').filter({ hasText: /Evolu√ß√£o|Evolution/ });
      const evolutionCount = await evolutionTab.count();

      console.log(`üîç Abas de Evolu√ß√£o encontradas: ${evolutionCount}`);

      if (evolutionCount > 0) {
        await evolutionTab.first().click();
        console.log('üñ±Ô∏è Clicou na aba Evolu√ß√£o');

        // Aguardar carregamento
        await page.waitForTimeout(8000); // Mais tempo para evolu√ß√£o carregar

        // Verificar se a se√ß√£o de evolu√ß√£o apareceu
        const evolutionContent = modal.locator('.evolution-content, .evolution-chain');
        const evolutionVisible = await evolutionContent.count();

        console.log(`üß¨ Conte√∫do de evolu√ß√£o: ${evolutionVisible}`);

        if (evolutionVisible > 0) {
          console.log('‚úÖ SUCESSO: Se√ß√£o Evolu√ß√£o carregou!');

          // Verificar se n√£o est√° em loading infinito
          const loadingSpinner = modal.locator('.loading-spinner, ion-spinner');
          const isLoading = await loadingSpinner.count();

          console.log(`‚è≥ Spinners de loading: ${isLoading}`);

          if (isLoading === 0) {
            console.log('üéâ PERFEITO: Evolu√ß√£o carregou sem loading infinito!');
          } else {
            console.log('‚ö†Ô∏è ATEN√á√ÉO: Ainda h√° spinners de loading');
          }
        } else {
          console.log('‚ùå PROBLEMA: Se√ß√£o Evolu√ß√£o n√£o apareceu');
        }
      }
    }
  });
});
