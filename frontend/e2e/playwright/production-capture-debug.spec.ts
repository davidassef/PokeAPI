import { test, expect } from '@playwright/test';

/**
 * Teste espec√≠fico para debugar erro de captura em produ√ß√£o
 * Monitora console e network para identificar problemas
 */

test.describe('Produ√ß√£o - Debug Captura Pok√©mon', () => {
  
  test.beforeEach(async ({ page }) => {
    // Configurar monitoramento de console
    page.on('console', msg => {
      const type = msg.type();
      const text = msg.text();
      console.log(`üîç [CONSOLE ${type.toUpperCase()}]: ${text}`);
    });

    // Configurar monitoramento de network
    page.on('request', request => {
      if (request.url().includes('api') || request.url().includes('capture')) {
        console.log(`üì° [REQUEST]: ${request.method()} ${request.url()}`);
      }
    });

    page.on('response', response => {
      if (response.url().includes('api') || response.url().includes('capture')) {
        console.log(`üì° [RESPONSE]: ${response.status()} ${response.url()}`);
      }
    });

    // Configurar monitoramento de erros
    page.on('pageerror', error => {
      console.log(`‚ùå [PAGE ERROR]: ${error.message}`);
    });

    page.on('requestfailed', request => {
      console.log(`‚ùå [REQUEST FAILED]: ${request.method()} ${request.url()} - ${request.failure()?.errorText}`);
    });
  });

  test('deve fazer login e tentar capturar pok√©mon em produ√ß√£o', async ({ page }) => {
    console.log('üß™ Iniciando teste de captura em produ√ß√£o');
    
    // Navegar para produ√ß√£o
    await page.goto('https://poke-api-mauve.vercel.app');
    console.log('‚úÖ Navegou para produ√ß√£o');
    
    // Aguardar carregamento
    await page.waitForLoadState('networkidle');
    console.log('‚úÖ P√°gina carregada');
    
    // Fazer login
    console.log('üîê Iniciando login...');
    const loginButton = page.locator('ion-button:has-text("Entrar")');
    await loginButton.waitFor({ state: 'visible', timeout: 10000 });
    await loginButton.click();
    
    // Preencher credenciais
    await page.fill('input[type="email"]', 'teste@teste.com');
    await page.fill('input[type="password"]', 'Teste123');
    
    // Submeter login
    const submitButton = page.locator('ion-button[type="submit"]');
    await submitButton.click();
    console.log('‚úÖ Login submetido');
    
    // Aguardar redirecionamento
    await page.waitForLoadState('networkidle');
    await page.waitForTimeout(3000);
    console.log('‚úÖ Login realizado');
    
    // Verificar se est√° logado
    const userInfo = page.locator('.user-info, .profile-info, ion-avatar');
    if (await userInfo.isVisible()) {
      console.log('‚úÖ Usu√°rio logado confirmado');
    }
    
    // Encontrar um pok√©mon para capturar
    console.log('üîç Procurando pok√©mon para capturar...');
    const pokemonCards = page.locator('.pokemon-card, .pokemon-item');
    await pokemonCards.first().waitFor({ state: 'visible', timeout: 10000 });
    
    const pokemonCount = await pokemonCards.count();
    console.log(`üìä Encontrados ${pokemonCount} pok√©mons`);
    
    // Clicar no primeiro pok√©mon
    const firstPokemon = pokemonCards.first();
    const pokemonName = await firstPokemon.locator('.pokemon-name, h3, h4').textContent();
    console.log(`üéØ Tentando capturar: ${pokemonName}`);
    
    await firstPokemon.click();
    console.log('‚úÖ Pok√©mon clicado');
    
    // Aguardar modal abrir
    await page.waitForTimeout(2000);
    
    // Procurar bot√£o de captura
    const captureButtons = [
      'ion-button:has-text("Capturar")',
      'button:has-text("Capturar")',
      '.capture-btn',
      '.btn-capture',
      '[data-action="capture"]'
    ];
    
    let captureButton = null;
    for (const selector of captureButtons) {
      const btn = page.locator(selector);
      if (await btn.isVisible()) {
        captureButton = btn;
        console.log(`‚úÖ Bot√£o de captura encontrado: ${selector}`);
        break;
      }
    }
    
    if (!captureButton) {
      console.log('‚ùå Bot√£o de captura n√£o encontrado');
      // Listar todos os bot√µes vis√≠veis
      const allButtons = page.locator('button, ion-button');
      const buttonCount = await allButtons.count();
      console.log(`üìä Bot√µes dispon√≠veis: ${buttonCount}`);
      
      for (let i = 0; i < Math.min(buttonCount, 10); i++) {
        const buttonText = await allButtons.nth(i).textContent();
        console.log(`  - Bot√£o ${i}: "${buttonText}"`);
      }
      return;
    }
    
    // Tentar capturar
    console.log('üéØ Tentando capturar pok√©mon...');
    await captureButton.click();
    console.log('‚úÖ Bot√£o de captura clicado');
    
    // Aguardar resposta
    await page.waitForTimeout(5000);
    
    // Verificar se houve sucesso ou erro
    const successMessage = page.locator('.success-message, .toast-success, ion-toast');
    const errorMessage = page.locator('.error-message, .toast-error, .alert-error');
    
    if (await successMessage.isVisible()) {
      const successText = await successMessage.textContent();
      console.log(`‚úÖ Captura bem-sucedida: ${successText}`);
    } else if (await errorMessage.isVisible()) {
      const errorText = await errorMessage.textContent();
      console.log(`‚ùå Erro na captura: ${errorText}`);
    } else {
      console.log('‚ö†Ô∏è Nenhuma mensagem de feedback vis√≠vel');
    }
    
    // Capturar estado final da p√°gina
    const finalUrl = page.url();
    console.log(`üìç URL final: ${finalUrl}`);
    
    // Verificar se h√° erros no console
    console.log('üîç Teste conclu√≠do - verifique os logs acima para erros');
  });

  test('deve verificar conectividade com backend em produ√ß√£o', async ({ page }) => {
    console.log('üß™ Testando conectividade com backend');
    
    // Testar endpoint de health
    const healthResponse = await page.request.get('https://pokeapi-la6k.onrender.com/health');
    console.log(`üì° Health check: ${healthResponse.status()}`);
    
    if (healthResponse.ok()) {
      const healthData = await healthResponse.json();
      console.log(`‚úÖ Backend online: ${JSON.stringify(healthData)}`);
    } else {
      console.log(`‚ùå Backend offline: ${healthResponse.status()}`);
    }
    
    // Navegar para a aplica√ß√£o
    await page.goto('https://poke-api-mauve.vercel.app');
    await page.waitForLoadState('networkidle');
    
    // Verificar se h√° erros de CORS ou conectividade
    await page.waitForTimeout(3000);
    console.log('‚úÖ Verifica√ß√£o de conectividade conclu√≠da');
  });

  test('deve monitorar requests de captura espec√≠ficos', async ({ page }) => {
    console.log('üß™ Monitorando requests de captura');
    
    // Interceptar requests espec√≠ficos
    await page.route('**/api/**', route => {
      const request = route.request();
      console.log(`üîç [INTERCEPTED]: ${request.method()} ${request.url()}`);
      console.log(`üîç [HEADERS]: ${JSON.stringify(request.headers())}`);
      
      if (request.postData()) {
        console.log(`üîç [BODY]: ${request.postData()}`);
      }
      
      route.continue();
    });
    
    // Fazer login e tentar captura
    await page.goto('https://poke-api-mauve.vercel.app');
    await page.waitForLoadState('networkidle');
    
    // Login r√°pido
    const loginButton = page.locator('ion-button:has-text("Entrar")');
    if (await loginButton.isVisible()) {
      await loginButton.click();
      await page.fill('input[type="email"]', 'teste@teste.com');
      await page.fill('input[type="password"]', 'Teste123');
      await page.click('ion-button[type="submit"]');
      await page.waitForLoadState('networkidle');
    }
    
    console.log('‚úÖ Monitoramento de requests configurado');
  });

});
