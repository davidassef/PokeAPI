import { test, expect } from '@playwright/test';

test.describe('Modal Mobile - Responsividade ao Toque', () => {
  test.beforeEach(async ({ page, context }) => {
    // ‚úÖ CORRE√á√ÉO: Habilitar suporte a toque
    await context.addInitScript(() => {
      Object.defineProperty(navigator, 'maxTouchPoints', {
        writable: false,
        value: 1,
      });
    });

    // Simular dispositivo mobile com toque
    await page.setViewportSize({ width: 375, height: 667 });
    await page.goto('http://localhost:4200/');

    // Aguardar carregamento da p√°gina
    await page.waitForLoadState('networkidle');
    console.log('üì± P√°gina carregada em modo mobile com suporte a toque');
  });

  test('Deve permitir scroll vertical no modal mobile', async ({ page }) => {
    console.log('üß™ Testando scroll vertical no modal mobile...');

    // Clicar no primeiro card para abrir o modal
    const firstCard = page.locator('app-pokemon-card').first();
    await firstCard.click();
    console.log('üñ±Ô∏è Clicou no primeiro card');

    // Aguardar modal mobile abrir
    await page.waitForSelector('app-pokemon-details-mobile .mobile-modal-overlay', { timeout: 10000 });
    const mobileModal = page.locator('app-pokemon-details-mobile .mobile-modal-overlay');
    await expect(mobileModal).toBeVisible();
    console.log('‚úÖ Modal mobile abriu corretamente');

    // Aguardar conte√∫do carregar
    await page.waitForTimeout(3000); // Aumentado para garantir carregamento completo

    // Verificar se o container scroll√°vel est√° presente
    const scrollContainer = page.locator('.global-scroll-container');
    await expect(scrollContainer).toBeVisible();
    console.log('‚úÖ Container scroll√°vel encontrado');

    // Verificar propriedades CSS do scroll
    const scrollContainerStyles = await scrollContainer.evaluate((el) => {
      const styles = window.getComputedStyle(el);
      return {
        overflowY: styles.overflowY,
        overflowX: styles.overflowX,
        touchAction: styles.touchAction,
        webkitOverflowScrolling: styles.webkitOverflowScrolling
      };
    });

    console.log('üîç Estilos do container scroll√°vel:', scrollContainerStyles);

    // Verificar se as propriedades de scroll est√£o corretas
    expect(scrollContainerStyles.overflowY).toBe('auto');
    expect(scrollContainerStyles.overflowX).toBe('hidden');
    console.log('‚úÖ Propriedades de overflow corretas');

    // Testar scroll program√°tico
    const initialScrollTop = await scrollContainer.evaluate(el => el.scrollTop);
    console.log(`üìè Scroll inicial: ${initialScrollTop}px`);

    // Fazer scroll para baixo
    await scrollContainer.evaluate(el => el.scrollTo(0, 200));
    await page.waitForTimeout(500);

    const newScrollTop = await scrollContainer.evaluate(el => el.scrollTop);
    console.log(`üìè Scroll ap√≥s movimento: ${newScrollTop}px`);

    // Verificar se o scroll funcionou
    expect(newScrollTop).toBeGreaterThan(initialScrollTop);
    console.log('‚úÖ Scroll program√°tico funcionou');

    // Testar scroll com gestos de mouse (simulando toque)
    const containerBounds = await scrollContainer.boundingBox();
    if (containerBounds) {
      // Simular swipe para cima (scroll para baixo) usando mouse
      const startX = containerBounds.x + containerBounds.width / 2;
      const startY = containerBounds.y + containerBounds.height / 2;
      const endY = containerBounds.y + containerBounds.height / 4;

      // Simular movimento de drag (swipe up)
      await page.mouse.move(startX, startY);
      await page.mouse.down();
      await page.mouse.move(startX, endY, { steps: 10 });
      await page.mouse.up();

      await page.waitForTimeout(500);

      const finalScrollTop = await scrollContainer.evaluate(el => el.scrollTop);
      console.log(`üìè Scroll ap√≥s gesto: ${finalScrollTop}px`);

      console.log('‚úÖ Gestos de scroll simulados');
    }

    // Fechar modal
    await page.keyboard.press('Escape');
    await page.waitForTimeout(1000);
    console.log('üîí Modal fechado');
  });

  test('Deve permitir intera√ß√£o com bot√£o de captura no modal mobile', async ({ page }) => {
    console.log('üß™ Testando intera√ß√£o com bot√£o de captura no modal mobile...');

    // Clicar no primeiro card para abrir o modal
    const firstCard = page.locator('app-pokemon-card').first();
    await firstCard.click();
    console.log('üñ±Ô∏è Clicou no primeiro card');

    // Aguardar modal mobile abrir
    await page.waitForSelector('app-pokemon-details-mobile .mobile-modal-overlay', { timeout: 10000 });
    const mobileModal = page.locator('app-pokemon-details-mobile .mobile-modal-overlay');
    await expect(mobileModal).toBeVisible();
    console.log('‚úÖ Modal mobile abriu corretamente');

    // Aguardar conte√∫do carregar
    await page.waitForTimeout(2000);

    // Verificar se o bot√£o de captura est√° presente
    const captureButton = page.locator('.mobile-capture-btn');
    await expect(captureButton).toBeVisible();
    console.log('‚úÖ Bot√£o de captura encontrado');

    // Verificar propriedades CSS do bot√£o
    const buttonStyles = await captureButton.evaluate((el) => {
      const styles = window.getComputedStyle(el);
      return {
        pointerEvents: styles.pointerEvents,
        position: styles.position,
        zIndex: styles.zIndex,
        cursor: styles.cursor
      };
    });

    console.log('üîç Estilos do bot√£o de captura:', buttonStyles);

    // Verificar se o bot√£o est√° interativo
    expect(buttonStyles.pointerEvents).not.toBe('none');
    expect(buttonStyles.cursor).toBe('pointer');
    console.log('‚úÖ Bot√£o est√° interativo');

    // Testar clique no bot√£o
    const buttonBounds = await captureButton.boundingBox();
    if (buttonBounds) {
      // Simular clique no bot√£o (equivalente a toque)
      await page.mouse.click(
        buttonBounds.x + buttonBounds.width / 2,
        buttonBounds.y + buttonBounds.height / 2
      );

      console.log('‚úÖ Clique no bot√£o de captura simulado');

      // Aguardar poss√≠vel resposta (modal de auth ou loading)
      await page.waitForTimeout(1000);
    }

    // Fechar modal
    await page.keyboard.press('Escape');
    await page.waitForTimeout(1000);
    console.log('üîí Modal fechado');
  });

  test('Deve permitir navega√ß√£o entre abas no modal mobile', async ({ page }) => {
    console.log('üß™ Testando navega√ß√£o entre abas no modal mobile...');

    // Clicar no primeiro card para abrir o modal
    const firstCard = page.locator('app-pokemon-card').first();
    await firstCard.click();
    console.log('üñ±Ô∏è Clicou no primeiro card');

    // Aguardar modal mobile abrir
    await page.waitForSelector('app-pokemon-details-mobile .mobile-modal-overlay', { timeout: 10000 });
    const mobileModal = page.locator('app-pokemon-details-mobile .mobile-modal-overlay');
    await expect(mobileModal).toBeVisible();
    console.log('‚úÖ Modal mobile abriu corretamente');

    // Aguardar conte√∫do carregar
    await page.waitForTimeout(2000);

    // Verificar se as abas est√£o presentes
    const tabButtons = page.locator('.mobile-tabs-static .tab-btn');
    const tabCount = await tabButtons.count();
    console.log(`üìä Encontradas ${tabCount} abas`);

    if (tabCount > 1) {
      // Clicar na segunda aba
      await tabButtons.nth(1).click();
      await page.waitForTimeout(500);
      console.log('‚úÖ Clicou na segunda aba');

      // Verificar se a aba mudou
      const activeTab = page.locator('.tab-btn.active');
      await expect(activeTab).toBeVisible();
      console.log('‚úÖ Aba ativa encontrada');
    }

    // Fechar modal
    await page.keyboard.press('Escape');
    await page.waitForTimeout(1000);
    console.log('üîí Modal fechado');
  });

  test('Deve permitir scroll sem interfer√™ncia do evento de overlay', async ({ page }) => {
    console.log('üß™ Testando se evento de overlay n√£o interfere com scroll...');

    // Clicar no primeiro card para abrir o modal
    const firstCard = page.locator('app-pokemon-card').first();
    await firstCard.click();
    console.log('üñ±Ô∏è Clicou no primeiro card');

    // Aguardar modal mobile abrir
    await page.waitForSelector('app-pokemon-details-mobile .mobile-modal-overlay', { timeout: 10000 });
    const mobileModal = page.locator('app-pokemon-details-mobile .mobile-modal-overlay');
    await expect(mobileModal).toBeVisible();
    console.log('‚úÖ Modal mobile abriu corretamente');

    // Aguardar conte√∫do carregar
    await page.waitForTimeout(3000);

    // Verificar se o container scroll√°vel est√° presente
    const scrollContainer = page.locator('.global-scroll-container');
    await expect(scrollContainer).toBeVisible();
    console.log('‚úÖ Container scroll√°vel encontrado');

    // Verificar altura do conte√∫do para garantir que h√° scroll
    const containerHeight = await scrollContainer.evaluate(el => el.scrollHeight);
    const viewportHeight = await scrollContainer.evaluate(el => el.clientHeight);
    console.log(`üìè Altura do conte√∫do: ${containerHeight}px, Viewport: ${viewportHeight}px`);

    if (containerHeight > viewportHeight) {
      console.log('‚úÖ Conte√∫do √© maior que viewport, scroll necess√°rio');

      // Testar scroll com wheel event (mais pr√≥ximo do comportamento real)
      const containerBounds = await scrollContainer.boundingBox();
      if (containerBounds) {
        const centerX = containerBounds.x + containerBounds.width / 2;
        const centerY = containerBounds.y + containerBounds.height / 2;

        // Scroll inicial
        const initialScrollTop = await scrollContainer.evaluate(el => el.scrollTop);
        console.log(`üìè Scroll inicial: ${initialScrollTop}px`);

        // Simular scroll com wheel (mais realista)
        await page.mouse.move(centerX, centerY);
        await page.mouse.wheel(0, 200); // Scroll para baixo
        await page.waitForTimeout(500);

        const newScrollTop = await scrollContainer.evaluate(el => el.scrollTop);
        console.log(`üìè Scroll ap√≥s wheel: ${newScrollTop}px`);

        if (newScrollTop > initialScrollTop) {
          console.log('‚úÖ SUCESSO: Scroll com wheel funcionou!');
        } else {
          console.log('‚ö†Ô∏è Scroll com wheel n√£o funcionou, tentando drag...');

          // Fallback: testar com drag
          await page.mouse.move(centerX, centerY);
          await page.mouse.down();
          await page.mouse.move(centerX, centerY - 100, { steps: 5 });
          await page.mouse.up();
          await page.waitForTimeout(500);

          const finalScrollTop = await scrollContainer.evaluate(el => el.scrollTop);
          console.log(`üìè Scroll ap√≥s drag: ${finalScrollTop}px`);

          if (finalScrollTop > initialScrollTop) {
            console.log('‚úÖ SUCESSO: Scroll com drag funcionou!');
          } else {
            console.log('‚ùå PROBLEMA: Nenhum m√©todo de scroll funcionou');
          }
        }
      }
    } else {
      console.log('‚ö†Ô∏è Conte√∫do n√£o √© maior que viewport, scroll n√£o necess√°rio');
    }

    // Verificar se o modal ainda est√° aberto (n√£o foi fechado por engano)
    await expect(mobileModal).toBeVisible();
    console.log('‚úÖ Modal ainda est√° aberto ap√≥s tentativas de scroll');

    // Fechar modal
    await page.keyboard.press('Escape');
    await page.waitForTimeout(1000);
    console.log('üîí Modal fechado');
  });
});
