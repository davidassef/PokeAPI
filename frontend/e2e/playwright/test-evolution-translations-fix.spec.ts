import { test, expect } from '@playwright/test';

/**
 * Teste de Corre√ß√£o das Tradu√ß√µes da Aba Evolution
 * Verifica se as chaves n√£o traduzidas foram corrigidas
 */
test.describe('üß™ Corre√ß√£o das Tradu√ß√µes da Aba Evolution', () => {
  test('Deve verificar se tradu√ß√µes da aba Evolution est√£o funcionando corretamente', async ({ page }) => {
    console.log('üß™ Testando corre√ß√£o das tradu√ß√µes na aba Evolution...');

    await page.setViewportSize({ width: 1280, height: 720 });
    await page.goto('/');
    await page.waitForSelector('app-pokemon-card', { timeout: 15000 });
    await page.waitForTimeout(3000);

    // Abrir modal do primeiro Pok√©mon
    console.log('\nüì± Abrindo modal do primeiro Pok√©mon...');
    const firstCard = page.locator('app-pokemon-card').first();
    await firstCard.click();
    await page.waitForTimeout(3000);

    // Verificar se modal abriu
    const modal = page.locator('app-details-modal');
    await expect(modal).toBeVisible();
    console.log('‚úÖ Modal aberto');

    // Navegar para aba Evolution
    console.log('\nüîÑ Navegando para aba Evolution...');
    const evolutionTab = modal.locator('button.tab-btn').filter({ hasText: /Evolu√ß√£o|Evolution/ });

    if (await evolutionTab.count() > 0) {
      await evolutionTab.click();
      await page.waitForTimeout(5000); // Aguardar carregamento da aba

      console.log('\nüîç Verificando tradu√ß√µes na aba Evolution...');

      // Verificar se n√£o h√° chaves n√£o traduzidas
      const untranslatedKeys = await page.locator('text=/modal\\.level|level-up/').count();
      console.log(`‚ùå Chaves n√£o traduzidas encontradas: ${untranslatedKeys}`);

      if (untranslatedKeys > 0) {
        // Capturar exemplos de chaves n√£o traduzidas
        const examples = await page.locator('text=/modal\\.level|level-up/').allTextContents();
        examples.forEach((example, index) => {
          console.log(`   ${index + 1}. "${example}"`);
        });
      }

      expect(untranslatedKeys).toBe(0);

      // Verificar se h√° textos traduzidos corretamente
      console.log('\n‚úÖ Verificando tradu√ß√µes corretas...');

      // Procurar por "N√≠vel" (portugu√™s) ou "Level" (ingl√™s)
      const levelTexts = await page.locator('text=/N√≠vel|Level/').count();
      console.log(`üìä Textos "N√≠vel/Level" encontrados: ${levelTexts}`);

      if (levelTexts > 0) {
        const levelExamples = await page.locator('text=/N√≠vel|Level/').allTextContents();
        levelExamples.slice(0, 3).forEach((example, index) => {
          console.log(`   ${index + 1}. "${example.trim()}"`);
        });
      }

      // Verificar se h√° informa√ß√µes de evolu√ß√£o
      const evolutionInfo = await page.locator('.evolution-info-text, .pokemon-evolution-card').count();
      console.log(`üìä Cards de evolu√ß√£o encontrados: ${evolutionInfo}`);

      if (evolutionInfo > 0) {
        console.log('‚úÖ Informa√ß√µes de evolu√ß√£o presentes');

        // Verificar se h√° setas de evolu√ß√£o com texto traduzido
        const evolutionArrows = await page.locator('.evolution-arrow .evolution-trigger').count();
        console.log(`üèπ Setas de evolu√ß√£o com texto: ${evolutionArrows}`);

        if (evolutionArrows > 0) {
          const arrowTexts = await page.locator('.evolution-arrow .evolution-trigger').allTextContents();
          arrowTexts.slice(0, 2).forEach((text, index) => {
            console.log(`   Seta ${index + 1}: "${text.trim()}"`);
          });
        }
      }

      // Verificar se n√£o h√° interpola√ß√µes n√£o processadas
      const rawInterpolations = await page.locator('text=/\\{\\{.*\\}\\}/').count();
      console.log(`üîß Interpola√ß√µes n√£o processadas: ${rawInterpolations}`);

      if (rawInterpolations > 0) {
        const interpolationExamples = await page.locator('text=/\\{\\{.*\\}\\}/').allTextContents();
        interpolationExamples.forEach((example, index) => {
          console.log(`   ${index + 1}. "${example}"`);
        });
      }

      expect(rawInterpolations).toBe(0);

      console.log('\nüéâ Verifica√ß√£o de tradu√ß√µes conclu√≠da!');
    } else {
      console.log('‚ö†Ô∏è Aba Evolution n√£o encontrada neste Pok√©mon');
    }

    // Fechar modal
    const closeButton = page.locator('ion-button[aria-label="Fechar modal"], .close-button, ion-backdrop');
    if (await closeButton.count() > 0) {
      await closeButton.first().click();
      await page.waitForTimeout(1000);
    }
  });

  test('Deve testar tradu√ß√µes em m√∫ltiplos Pok√©mon com evolu√ß√£o', async ({ page }) => {
    console.log('üß™ Testando tradu√ß√µes em m√∫ltiplos Pok√©mon...');

    await page.setViewportSize({ width: 1280, height: 720 });
    await page.goto('/');
    await page.waitForSelector('app-pokemon-card', { timeout: 15000 });
    await page.waitForTimeout(3000);

    const pokemonToTest = ['Bulbasaur', 'Charmander', 'Squirtle'];

    for (const pokemonName of pokemonToTest) {
      console.log(`\nüéØ Testando ${pokemonName}...`);

      // Procurar pelo Pok√©mon espec√≠fico
      const pokemonCard = page.locator('app-pokemon-card').filter({
        has: page.locator('.pokemon-name').filter({ hasText: new RegExp(pokemonName, 'i') })
      });

      if (await pokemonCard.count() > 0) {
        await pokemonCard.first().click();
        await page.waitForTimeout(2000);

        const modal = page.locator('app-details-modal');
        if (await modal.isVisible()) {
          // Navegar para aba Evolution
          const evolutionTab = modal.locator('button.tab-btn').filter({ hasText: /Evolu√ß√£o|Evolution/ });

          if (await evolutionTab.count() > 0) {
            await evolutionTab.click();
            await page.waitForTimeout(3000);

            // Verificar tradu√ß√µes
            const untranslatedKeys = await page.locator('text=/modal\\.level|level-up/').count();
            const rawInterpolations = await page.locator('text=/\\{\\{.*\\}\\}/').count();

            console.log(`   üìä ${pokemonName}: ${untranslatedKeys} chaves n√£o traduzidas, ${rawInterpolations} interpola√ß√µes n√£o processadas`);

            expect(untranslatedKeys).toBe(0);
            expect(rawInterpolations).toBe(0);

            // Verificar se h√° textos de n√≠vel traduzidos
            const levelTexts = await page.locator('text=/N√≠vel \\d+|Level \\d+/').count();
            if (levelTexts > 0) {
              console.log(`   ‚úÖ ${pokemonName}: ${levelTexts} textos de n√≠vel traduzidos`);
            }
          }

          // Fechar modal
          const closeButton = page.locator('ion-button[aria-label="Fechar modal"], .close-button, ion-backdrop');
          if (await closeButton.count() > 0) {
            await closeButton.first().click();
            await page.waitForTimeout(1000);
          }
        }
      } else {
        console.log(`   ‚ö†Ô∏è ${pokemonName} n√£o encontrado na p√°gina atual`);
      }
    }

    console.log('\n‚úÖ Teste de m√∫ltiplos Pok√©mon conclu√≠do');
  });

  test('Deve verificar que m√©todo getEvolutionMethodText funciona corretamente', async ({ page }) => {
    console.log('üß™ Testando m√©todo getEvolutionMethodText...');

    await page.setViewportSize({ width: 1280, height: 720 });
    await page.goto('/');
    await page.waitForSelector('app-pokemon-card', { timeout: 15000 });
    await page.waitForTimeout(3000);

    // Abrir modal de um Pok√©mon que evolui
    const firstCard = page.locator('app-pokemon-card').first();
    await firstCard.click();
    await page.waitForTimeout(2000);

    const modal = page.locator('app-details-modal');
    if (await modal.isVisible()) {
      // Navegar para aba Evolution
      const evolutionTab = modal.locator('button.tab-btn').filter({ hasText: /Evolu√ß√£o|Evolution/ });

      if (await evolutionTab.count() > 0) {
        await evolutionTab.click();
        await page.waitForTimeout(3000);

        console.log('\nüîç Verificando m√©todos de evolu√ß√£o...');

        // Verificar se h√° spans com classe evolution-method
        const evolutionMethods = await page.locator('.evolution-method').count();
        console.log(`üìä M√©todos de evolu√ß√£o encontrados: ${evolutionMethods}`);

        if (evolutionMethods > 0) {
          const methodTexts = await page.locator('.evolution-method').allTextContents();
          methodTexts.forEach((text, index) => {
            console.log(`   M√©todo ${index + 1}: "${text.trim()}"`);
          });

          // Verificar se n√£o h√° textos "level-up" n√£o traduzidos
          const untranslatedMethods = methodTexts.filter(text =>
            text.includes('level-up') || text.includes('evolution.methods.')
          );

          expect(untranslatedMethods.length).toBe(0);

          if (untranslatedMethods.length === 0) {
            console.log('‚úÖ Todos os m√©todos de evolu√ß√£o est√£o traduzidos');
          } else {
            console.log('‚ùå M√©todos n√£o traduzidos encontrados:', untranslatedMethods);
          }
        }

        // Verificar triggers de evolu√ß√£o nas setas
        const evolutionTriggers = await page.locator('.evolution-trigger').count();
        console.log(`üèπ Triggers de evolu√ß√£o encontrados: ${evolutionTriggers}`);

        if (evolutionTriggers > 0) {
          const triggerTexts = await page.locator('.evolution-trigger').allTextContents();
          triggerTexts.forEach((text, index) => {
            console.log(`   Trigger ${index + 1}: "${text.trim()}"`);
          });

          // Verificar se n√£o h√° chaves de tradu√ß√£o n√£o processadas
          const untranslatedTriggers = triggerTexts.filter(text =>
            text.includes('evolution.triggers.') || text.includes('{{') || text.includes('}}')
          );

          expect(untranslatedTriggers.length).toBe(0);

          if (untranslatedTriggers.length === 0) {
            console.log('‚úÖ Todos os triggers de evolu√ß√£o est√£o traduzidos');
          } else {
            console.log('‚ùå Triggers n√£o traduzidos encontrados:', untranslatedTriggers);
          }
        }
      }

      // Fechar modal
      const closeButton = page.locator('ion-button[aria-label="Fechar modal"], .close-button, ion-backdrop');
      if (await closeButton.count() > 0) {
        await closeButton.first().click();
        await page.waitForTimeout(1000);
      }
    }

    console.log('‚úÖ Teste de m√©todos de evolu√ß√£o conclu√≠do');
  });
});
