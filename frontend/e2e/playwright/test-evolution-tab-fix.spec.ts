import { test, expect } from '@playwright/test';

/**
 * Teste para Verificar e Corrigir Problemas na Aba Evolution
 * Identifica problemas de interpola√ß√£o e template binding
 */
test.describe('üß™ Teste de Corre√ß√£o da Aba Evolution', () => {
  test('Deve verificar se aba Evolution tem problemas de interpola√ß√£o', async ({ page }) => {
    console.log('üß™ Investigando problemas na aba Evolution...');

    await page.setViewportSize({ width: 1280, height: 720 });
    await page.goto('/');
    await page.waitForSelector('app-pokemon-card', { timeout: 15000 });
    await page.waitForTimeout(3000);

    // Abrir modal do primeiro Pok√©mon
    const firstCard = page.locator('app-pokemon-card').first();
    const pokemonName = await firstCard.locator('.pokemon-name').textContent();
    console.log(`üì± Abrindo modal de: ${pokemonName}`);
    
    await firstCard.click();
    await page.waitForSelector('app-details-modal[ng-reflect-is-open="true"]', { timeout: 10000 });
    
    const modal = page.locator('app-details-modal[ng-reflect-is-open="true"]');
    await expect(modal).toBeVisible();

    // Navegar para aba Evolution
    console.log('\nüîÑ Navegando para aba Evolution...');
    const evolutionTab = modal.locator('[role="tab"]').filter({ hasText: /Evolu√ß√£o|Evolution/ });
    
    if (await evolutionTab.count() > 0) {
      await evolutionTab.click();
      await page.waitForTimeout(5000); // Aguardar carregamento

      // Verificar se h√° problemas de interpola√ß√£o
      console.log('\nüîç Verificando problemas de interpola√ß√£o...');
      
      // Procurar por texto n√£o interpolado ({{}} syntax)
      const rawTemplateText = await modal.locator('text=/\\{\\{.*\\}\\}/').count();
      if (rawTemplateText > 0) {
        console.log(`‚ùå PROBLEMA ENCONTRADO: ${rawTemplateText} interpola√ß√µes n√£o processadas`);
        
        // Capturar exemplos
        const examples = await modal.locator('text=/\\{\\{.*\\}\\}/').allTextContents();
        examples.forEach((example, index) => {
          console.log(`   ${index + 1}. "${example}"`);
        });
      } else {
        console.log('‚úÖ Nenhuma interpola√ß√£o n√£o processada encontrada');
      }

      // Verificar conte√∫do da aba Evolution
      console.log('\nüìä Analisando conte√∫do da aba Evolution...');
      
      const evolutionContent = modal.locator('.evolution-content');
      if (await evolutionContent.count() > 0) {
        console.log('‚úÖ Container de evolu√ß√£o encontrado');
        
        // Verificar se h√° loading
        const loadingSpinner = evolutionContent.locator('ion-spinner');
        if (await loadingSpinner.count() > 0) {
          console.log('‚è≥ Loading spinner presente - aguardando...');
          await page.waitForTimeout(3000);
        }

        // Verificar cadeia de evolu√ß√£o
        const evolutionChain = evolutionContent.locator('.evolution-chain');
        if (await evolutionChain.count() > 0) {
          console.log('‚úÖ Cadeia de evolu√ß√£o encontrada');
          
          // Verificar est√°gios de evolu√ß√£o
          const evolutionStages = evolutionChain.locator('.evolution-stage');
          const stageCount = await evolutionStages.count();
          console.log(`üìä ${stageCount} est√°gios de evolu√ß√£o encontrados`);
          
          // Verificar cada est√°gio
          for (let i = 0; i < stageCount; i++) {
            const stage = evolutionStages.nth(i);
            
            // Verificar nome do Pok√©mon
            const stageName = stage.locator('h4');
            if (await stageName.count() > 0) {
              const nameText = await stageName.textContent();
              if (nameText?.includes('{{') || nameText?.includes('}}')) {
                console.log(`‚ùå PROBLEMA: Nome n√£o interpolado no est√°gio ${i + 1}: "${nameText}"`);
              } else {
                console.log(`‚úÖ Est√°gio ${i + 1}: ${nameText}`);
              }
            }
            
            // Verificar imagem
            const stageImage = stage.locator('img');
            if (await stageImage.count() > 0) {
              const imageSrc = await stageImage.getAttribute('src');
              if (imageSrc?.includes('{{') || imageSrc?.includes('}}')) {
                console.log(`‚ùå PROBLEMA: Src de imagem n√£o interpolado no est√°gio ${i + 1}`);
              }
            }
            
            // Verificar n√≠vel de evolu√ß√£o
            const evolutionLevel = stage.locator('.evolution-level');
            if (await evolutionLevel.count() > 0) {
              const levelText = await evolutionLevel.textContent();
              if (levelText?.includes('{{') || levelText?.includes('}}')) {
                console.log(`‚ùå PROBLEMA: N√≠vel n√£o interpolado: "${levelText}"`);
              }
            }
          }
          
        } else {
          // Verificar se h√° mensagem de "n√£o evolui"
          const noEvolution = evolutionContent.locator('.no-evolution');
          if (await noEvolution.count() > 0) {
            console.log('‚ÑπÔ∏è Pok√©mon n√£o evolui - mensagem exibida corretamente');
          } else {
            console.log('‚ö†Ô∏è Nenhuma cadeia de evolu√ß√£o ou mensagem encontrada');
          }
        }

        // Verificar informa√ß√µes adicionais
        const evolutionDetails = evolutionContent.locator('.evolution-details');
        if (await evolutionDetails.count() > 0) {
          console.log('‚úÖ Detalhes de evolu√ß√£o encontrados');
          
          // Verificar se h√° problemas de interpola√ß√£o nos detalhes
          const detailsText = await evolutionDetails.textContent();
          if (detailsText?.includes('{{') || detailsText?.includes('}}')) {
            console.log('‚ùå PROBLEMA: Interpola√ß√£o n√£o processada nos detalhes');
          }
        }

      } else {
        console.log('‚ùå PROBLEMA: Container de evolu√ß√£o n√£o encontrado');
      }

      // Verificar se h√° erros no console
      console.log('\nüîç Verificando erros no console...');
      const consoleLogs = await page.evaluate(() => {
        return (window as any).consoleErrors || [];
      });
      
      if (consoleLogs.length > 0) {
        console.log(`‚ö†Ô∏è ${consoleLogs.length} erros no console encontrados`);
      }

    } else {
      console.log('‚ùå PROBLEMA: Aba Evolution n√£o encontrada');
    }

    // Fechar modal
    await page.keyboard.press('Escape');
    await page.waitForTimeout(1000);

    console.log('\nüìã Investiga√ß√£o da aba Evolution conclu√≠da');
  });

  test('Deve testar m√∫ltiplos Pok√©mon para verificar consist√™ncia da aba Evolution', async ({ page }) => {
    console.log('üß™ Testando aba Evolution em m√∫ltiplos Pok√©mon...');

    await page.setViewportSize({ width: 1280, height: 720 });
    await page.goto('/');
    await page.waitForSelector('app-pokemon-card', { timeout: 15000 });
    await page.waitForTimeout(3000);

    const cards = page.locator('app-pokemon-card');
    const cardCount = await cards.count();
    const pokemonToTest = Math.min(3, cardCount);

    for (let i = 0; i < pokemonToTest; i++) {
      console.log(`\nüéØ Testando Pok√©mon ${i + 1}/${pokemonToTest}`);
      
      const card = cards.nth(i);
      const pokemonName = await card.locator('.pokemon-name').textContent();
      console.log(`üì± Pok√©mon: ${pokemonName}`);

      // Abrir modal
      await card.click();
      await page.waitForSelector('app-details-modal[ng-reflect-is-open="true"]', { timeout: 10000 });
      
      const modal = page.locator('app-details-modal[ng-reflect-is-open="true"]');

      // Navegar para aba Evolution
      const evolutionTab = modal.locator('[role="tab"]').filter({ hasText: /Evolu√ß√£o|Evolution/ });
      
      if (await evolutionTab.count() > 0) {
        await evolutionTab.click();
        await page.waitForTimeout(3000);

        // Verificar se carregou sem problemas
        const evolutionContent = modal.locator('.evolution-content');
        if (await evolutionContent.count() > 0) {
          // Verificar se h√° interpola√ß√µes n√£o processadas
          const rawInterpolations = await evolutionContent.locator('text=/\\{\\{.*\\}\\}/').count();
          
          if (rawInterpolations > 0) {
            console.log(`‚ùå ${pokemonName}: ${rawInterpolations} interpola√ß√µes n√£o processadas`);
          } else {
            console.log(`‚úÖ ${pokemonName}: Aba Evolution OK`);
          }
        } else {
          console.log(`‚ö†Ô∏è ${pokemonName}: Conte√∫do de evolu√ß√£o n√£o encontrado`);
        }
      }

      // Fechar modal
      await page.keyboard.press('Escape');
      await page.waitForTimeout(1000);
    }

    console.log('\nüéâ Teste de m√∫ltiplos Pok√©mon conclu√≠do');
  });
});
