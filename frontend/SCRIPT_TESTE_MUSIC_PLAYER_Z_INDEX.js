// ===== SCRIPT DE TESTE PARA MUSIC PLAYER Z-INDEX =====
// Execute este script no DevTools para testar se o music player est√° sendo corrigido

console.log('üîß INICIANDO TESTE DO MUSIC PLAYER Z-INDEX...\n');

// ===== 1. VERIFICAR COMPONENTE MUSIC PLAYER =====
console.log('üìã 1. VERIFICANDO COMPONENTE MUSIC PLAYER...');

const musicPlayerComponent = document.querySelector('app-music-player');
const musicPlayerElement = document.querySelector('.music-player');

console.log('Componente app-music-player:', musicPlayerComponent ? '‚úÖ Encontrado' : '‚ùå N√£o encontrado');
console.log('Elemento .music-player:', musicPlayerElement ? '‚úÖ Encontrado' : '‚ùå N√£o encontrado');

if (musicPlayerElement) {
  const playerZIndex = window.getComputedStyle(musicPlayerElement).zIndex;
  const playerPosition = window.getComputedStyle(musicPlayerElement).position;
  const playerBottom = window.getComputedStyle(musicPlayerElement).bottom;
  
  console.log('Music Player propriedades:', {
    zIndex: playerZIndex,
    position: playerPosition,
    bottom: playerBottom,
    classes: musicPlayerElement.className
  });
}

// ===== 2. VERIFICAR MODAL PRESENTE =====
console.log('\nüìã 2. VERIFICANDO MODAL PRESENTE...');

const modal = document.querySelector('.mobile-modal-overlay, .details-modal-overlay');
const modalComponent = document.querySelector('app-pokemon-details-mobile');

console.log('Modal encontrado:', modal ? '‚úÖ Sim' : '‚ùå N√£o');
console.log('Componente modal:', modalComponent ? '‚úÖ Sim' : '‚ùå N√£o');

if (modal) {
  const modalZIndex = window.getComputedStyle(modal).zIndex;
  const modalPosition = window.getComputedStyle(modal).position;
  console.log('Modal Z-Index:', modalZIndex);
  console.log('Modal Position:', modalPosition);
}

// ===== 3. VERIFICAR HIERARQUIA Z-INDEX =====
console.log('\nüìã 3. VERIFICANDO HIERARQUIA Z-INDEX...');

if (modal && musicPlayerElement) {
  const modalZIndex = parseInt(window.getComputedStyle(modal).zIndex);
  const playerZIndex = parseInt(window.getComputedStyle(musicPlayerElement).zIndex);
  
  console.log(`Modal Z-Index: ${modalZIndex}`);
  console.log(`Music Player Z-Index: ${playerZIndex}`);
  
  if (playerZIndex < modalZIndex) {
    console.log('‚úÖ HIERARQUIA CORRETA: Music Player est√° abaixo do modal');
  } else {
    console.log('‚ùå PROBLEMA DE HIERARQUIA: Music Player est√° sobrepondo modal');
  }
} else if (!modal) {
  console.log('‚ö†Ô∏è Modal n√£o encontrado - abra um modal primeiro para testar hierarquia');
} else {
  console.log('‚ö†Ô∏è Music Player n√£o encontrado');
}

// ===== 4. VERIFICAR OBSERVER DE MODAIS =====
console.log('\nüìã 4. VERIFICANDO OBSERVER DE MODAIS...');

// Verificar se o music player tem a classe modal-open quando modal presente
if (musicPlayerElement && modal) {
  const hasModalOpenClass = musicPlayerElement.classList.contains('modal-open');
  console.log('Music Player tem classe modal-open:', hasModalOpenClass ? '‚úÖ Sim' : '‚ùå N√£o');
  
  if (hasModalOpenClass) {
    console.log('‚úÖ Observer funcionando - classe modal-open aplicada');
  } else {
    console.log('‚ö†Ô∏è Observer pode n√£o estar funcionando - classe modal-open n√£o aplicada');
  }
}

// ===== 5. VERIFICAR VARI√ÅVEIS CSS =====
console.log('\nüìã 5. VERIFICANDO VARI√ÅVEIS CSS...');

const rootStyles = getComputedStyle(document.documentElement);
const zMusicPlayerValue = rootStyles.getPropertyValue('--z-music-player').trim();
const zPokemonModalValue = rootStyles.getPropertyValue('--z-pokemon-modal').trim();

console.log('Vari√°veis Z-Index:');
console.log('--z-music-player:', zMusicPlayerValue);
console.log('--z-pokemon-modal:', zPokemonModalValue);

if (parseInt(zMusicPlayerValue) < parseInt(zPokemonModalValue)) {
  console.log('‚úÖ Vari√°veis CSS corretas: Music Player < Pokemon Modal');
} else {
  console.log('‚ùå Problema nas vari√°veis CSS');
}

// ===== 6. APLICAR CORRE√á√ÉO DE EMERG√äNCIA SE NECESS√ÅRIO =====
console.log('\nüõ†Ô∏è 6. APLICANDO CORRE√á√ÉO DE EMERG√äNCIA SE NECESS√ÅRIO...');

let correctionApplied = false;

if (modal && musicPlayerElement) {
  const modalZIndex = parseInt(window.getComputedStyle(modal).zIndex);
  const playerZIndex = parseInt(window.getComputedStyle(musicPlayerElement).zIndex);
  
  if (playerZIndex >= modalZIndex) {
    console.log('üö® Aplicando corre√ß√£o de emerg√™ncia...');
    
    // For√ßar modal para z-index muito alto
    modal.style.zIndex = '999999';
    console.log('‚úÖ Modal z-index for√ßado para 999999');
    
    // For√ßar music player para z-index baixo
    musicPlayerElement.style.zIndex = '100';
    musicPlayerElement.classList.add('modal-open');
    console.log('‚úÖ Music Player z-index for√ßado para 100');
    
    correctionApplied = true;
  } else {
    console.log('‚úÖ Hierarquia j√° est√° correta - nenhuma corre√ß√£o necess√°ria');
  }
}

// ===== 7. TESTAR FUNCIONALIDADE DO MUSIC PLAYER =====
console.log('\nüìã 7. TESTANDO FUNCIONALIDADE DO MUSIC PLAYER...');

if (musicPlayerElement) {
  const isMinimized = musicPlayerElement.classList.contains('minimized');
  const isAutoMinimized = musicPlayerElement.classList.contains('auto-minimized');
  
  console.log('Estados do Music Player:');
  console.log('- Minimizado:', isMinimized ? 'Sim' : 'N√£o');
  console.log('- Auto-minimizado:', isAutoMinimized ? 'Sim' : 'N√£o');
  console.log('- Modal aberto:', musicPlayerElement.classList.contains('modal-open') ? 'Sim' : 'N√£o');
  
  // Verificar se controles est√£o acess√≠veis
  const playButton = musicPlayerElement.querySelector('.play-pause-btn, .play-pause-main');
  console.log('Bot√£o de play acess√≠vel:', playButton ? '‚úÖ Sim' : '‚ùå N√£o');
}

// ===== 8. VALIDA√á√ÉO FINAL =====
console.log('\n‚úÖ 8. VALIDA√á√ÉO FINAL...');

setTimeout(() => {
  if (modal && musicPlayerElement) {
    const finalModalZ = parseInt(window.getComputedStyle(modal).zIndex);
    const finalPlayerZ = parseInt(window.getComputedStyle(musicPlayerElement).zIndex);
    
    console.log(`üéØ Z-index final do modal: ${finalModalZ}`);
    console.log(`üéµ Z-index final do music player: ${finalPlayerZ}`);
    
    if (finalModalZ > finalPlayerZ) {
      console.log('üéâ CORRE√á√ÉO DO MUSIC PLAYER APLICADA COM SUCESSO!');
      console.log('Modal agora est√° acima do music player');
    } else {
      console.log('‚ùå CORRE√á√ÉO DO MUSIC PLAYER FALHOU - Verificar manualmente');
      console.log('üí° Tente recarregar a p√°gina e executar o script novamente');
    }
  }
}, 100);

// ===== 9. RESUMO FINAL =====
console.log('\nüìä RESUMO DO TESTE DO MUSIC PLAYER:');
console.log('='.repeat(50));

const results = {
  componentFound: !!musicPlayerComponent,
  elementFound: !!musicPlayerElement,
  modalFound: !!modal,
  hierarchyCorrect: modal && musicPlayerElement ? 
    parseInt(window.getComputedStyle(musicPlayerElement).zIndex) < parseInt(window.getComputedStyle(modal).zIndex) : 
    true,
  observerWorking: musicPlayerElement && modal ? 
    musicPlayerElement.classList.contains('modal-open') : 
    true
};

console.log('‚úÖ Componente encontrado:', results.componentFound);
console.log('‚úÖ Elemento encontrado:', results.elementFound);
console.log('‚úÖ Modal encontrado:', results.modalFound);
console.log('‚úÖ Hierarquia correta:', results.hierarchyCorrect);
console.log('‚úÖ Observer funcionando:', results.observerWorking);

const allTestsPassed = Object.values(results).every(result => result === true);

if (allTestsPassed) {
  console.log('\nüéâ TODOS OS TESTES DO MUSIC PLAYER PASSARAM!');
  console.log('O music player est√° funcionando corretamente com os modais!');
} else {
  console.log('\n‚ö†Ô∏è ALGUNS TESTES FALHARAM. VERIFICAR ELEMENTOS COM PROBLEMA.');
}

console.log('\nüîß TESTE DO MUSIC PLAYER CONCLU√çDO!');
console.log('üí° Teste manualmente abrindo um modal para verificar se o music player fica abaixo.');
