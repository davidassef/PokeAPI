// üì≥ Haptic Feedback Service
// Servi√ßo para feedback t√°til em dispositivos m√≥veis

import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root',
})
export class HapticFeedbackService {

  constructor() {}

  /**
   * Verifica se feedback h√°ptico est√° dispon√≠vel
   */
  private isAvailable(): boolean {
    return !!(navigator as any).vibrate || !!(window as any).Capacitor;
  }

  /**
   * Vibra√ß√£o leve para intera√ß√µes gerais
   */
  async light(): Promise<void> {
    if (!this.isAvailable()) return;

    try {
      // Capacitor Haptics (se dispon√≠vel)
      if ((window as any).Capacitor) {
        const { Haptics, ImpactStyle } = await import('@capacitor/haptics');
        await Haptics.impact({ style: ImpactStyle.Light });
        return;
      }

      // Web Vibration API (fallback)
      if ((navigator as any).vibrate) {
        (navigator as any).vibrate(25);
      }
    } catch (error) {
      console.log('Haptic feedback n√£o dispon√≠vel:', error);
    }
  }

  /**
   * Vibra√ß√£o m√©dia para confirma√ß√µes
   */
  async medium(): Promise<void> {
    if (!this.isAvailable()) return;

    try {
      if ((window as any).Capacitor) {
        const { Haptics, ImpactStyle } = await import('@capacitor/haptics');
        await Haptics.impact({ style: ImpactStyle.Medium });
        return;
      }

      if ((navigator as any).vibrate) {
        (navigator as any).vibrate(50);
      }
    } catch (error) {
      console.log('Haptic feedback n√£o dispon√≠vel:', error);
    }
  }

  /**
   * Vibra√ß√£o forte para a√ß√µes importantes
   */
  async heavy(): Promise<void> {
    if (!this.isAvailable()) return;

    try {
      if ((window as any).Capacitor) {
        const { Haptics, ImpactStyle } = await import('@capacitor/haptics');
        await Haptics.impact({ style: ImpactStyle.Heavy });
        return;
      }

      if ((navigator as any).vibrate) {
        (navigator as any).vibrate(100);
      }
    } catch (error) {
      console.log('Haptic feedback n√£o dispon√≠vel:', error);
    }
  }

  /**
   * Vibra√ß√£o para sucesso
   */
  async success(): Promise<void> {
    if (!this.isAvailable()) return;

    try {
      if ((window as any).Capacitor) {
        const { Haptics, NotificationType } = await import('@capacitor/haptics');
        await Haptics.notification({ type: NotificationType.Success });
        return;
      }

      // Padr√£o de vibra√ß√£o para sucesso: curto-pausa-curto
      if ((navigator as any).vibrate) {
        (navigator as any).vibrate([50, 50, 50]);
      }
    } catch (error) {
      console.log('Haptic feedback n√£o dispon√≠vel:', error);
    }
  }

  /**
   * Vibra√ß√£o para erro
   */
  async error(): Promise<void> {
    if (!this.isAvailable()) return;

    try {
      if ((window as any).Capacitor) {
        const { Haptics, NotificationType } = await import('@capacitor/haptics');
        await Haptics.notification({ type: NotificationType.Error });
        return;
      }

      // Padr√£o de vibra√ß√£o para erro: longo-pausa-longo
      if ((navigator as any).vibrate) {
        (navigator as any).vibrate([100, 50, 100]);
      }
    } catch (error) {
      console.log('Haptic feedback n√£o dispon√≠vel:', error);
    }
  }

  /**
   * Vibra√ß√£o para aviso
   */
  async warning(): Promise<void> {
    if (!this.isAvailable()) return;

    try {
      if ((window as any).Capacitor) {
        const { Haptics, NotificationType } = await import('@capacitor/haptics');
        await Haptics.notification({ type: NotificationType.Warning });
        return;
      }

      // Padr√£o de vibra√ß√£o para aviso: m√©dio-pausa-m√©dio-pausa-m√©dio
      if ((navigator as any).vibrate) {
        (navigator as any).vibrate([75, 25, 75, 25, 75]);
      }
    } catch (error) {
      console.log('Haptic feedback n√£o dispon√≠vel:', error);
    }
  }

  /**
   * Vibra√ß√£o customizada
   */
  async custom(pattern: number[]): Promise<void> {
    if (!this.isAvailable()) return;

    try {
      if ((navigator as any).vibrate) {
        (navigator as any).vibrate(pattern);
      }
    } catch (error) {
      console.log('Haptic feedback n√£o dispon√≠vel:', error);
    }
  }

  /**
   * Sele√ß√£o - vibra√ß√£o para navega√ß√£o/sele√ß√£o
   */
  async selection(): Promise<void> {
    if (!this.isAvailable()) return;

    try {
      if ((window as any).Capacitor) {
        const { Haptics } = await import('@capacitor/haptics');
        await Haptics.selectionStart();
        setTimeout(async () => {
          await Haptics.selectionEnd();
        }, 10);
        return;
      }

      if ((navigator as any).vibrate) {
        (navigator as any).vibrate(15);
      }
    } catch (error) {
      console.log('Haptic feedback n√£o dispon√≠vel:', error);
    }
  }

  /**
   * Para intera√ß√µes com Pok√©mon (pattern tem√°tico)
   */
  async pokemonCapture(): Promise<void> {
    if (!this.isAvailable()) return;

    try {
      // Padr√£o tem√°tico: simulando uma pokeball sendo arremessada
      // curto-pausa-curto-pausa-longo (arremesso-bounce-captura)
      if ((navigator as any).vibrate) {
        (navigator as any).vibrate([30, 100, 30, 100, 150]);
      }
    } catch (error) {
      console.log('Haptic feedback n√£o dispon√≠vel:', error);
    }
  }

  /**
   * Para favoritar Pok√©mon
   */
  async pokemonFavorite(): Promise<void> {
    if (!this.isAvailable()) return;

    try {
      // Padr√£o suave para favoritar
      if ((navigator as any).vibrate) {
        (navigator as any).vibrate([25, 25, 50]);
      }
    } catch (error) {
      console.log('Haptic feedback n√£o dispon√≠vel:', error);
    }
  }
}
